<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SRML</name>
    </assembly>
    <members>
        <member name="T:SRML.Console.Commands.AddButtonCommand">
            <summary>
            A command to add a user defined button to the command menu
            </summary>
        </member>
        <member name="T:SRML.Console.Commands.ClearCommand">
            <summary>
            A command to clear the console
            </summary>
        </member>
        <member name="T:SRML.Console.Commands.DumpCommand">
            <summary>
            A command that dumps stuff to dump files
            </summary>
        </member>
        <member name="T:SRML.Console.Commands.EditButtonCommand">
            <summary>
            A command to edit a user defined button
            </summary>
        </member>
        <member name="T:SRML.Console.Commands.HelpCommand">
            <summary>
            A command to display all commands
            </summary>
        </member>
        <member name="T:SRML.Console.Commands.ModsCommand">
            <summary>
            A command to display all mods
            </summary>
        </member>
        <member name="T:SRML.Console.Commands.ReloadCommand">
            <summary>
            A command to reload the mods
            </summary>
        </member>
        <member name="T:SRML.Console.Commands.RemoveButtonCommand">
            <summary>
            A command to remove a user defined button from the command menu
            </summary>
        </member>
        <member name="T:SRML.Console.Console">
            <summary>
            Controls the in-game console
            </summary>
        </member>
        <member name="E:SRML.Console.Console.Reload">
            <summary>
            The event that triggers when the Reload Command is called
            </summary>
        </member>
        <member name="M:SRML.Console.Console.Init">
            <summary>
            Initializes the console
            </summary>
        </member>
        <member name="M:SRML.Console.Console.RegisterCommand(SRML.Console.ConsoleCommand)">
            <summary>
            Registers a new command into the console
            </summary>
            <param name="cmd">Command to register</param>
            <returns>True if registered succesfully, false otherwise</returns>
        </member>
        <member name="M:SRML.Console.Console.RegisterButton(System.String,SRML.Console.ConsoleButton)">
            <summary>
            Registers a new console button
            </summary>
            <param name="id">The id of the button</param>
            <param name="button">Button to register</param>
            <returns>True if registered succesfully, false otherwise</returns>
        </member>
        <member name="M:SRML.Console.Console.RegisterDumpAction(System.String,SRML.Console.Console.DumpAction)">
            <summary>
            Registers a new dump action for the dump command
            </summary>
            <param name="id">The id to use for the dump command argument</param>
            <param name="action">The dump action to run</param>
            <returns>True if registered succesfully, false otherwise</returns>
        </member>
        <member name="M:SRML.Console.Console.RegisterCommandCatcher(SRML.Console.Console.CommandCatcher)">
            <summary>
            Registers a command catcher which allows commands to be processed and their execution controlled by outside methods
            </summary>
            <param name="catcher">The method to catch the commands</param>
        </member>
        <member name="M:SRML.Console.Console.Log(System.String,System.Boolean)">
            <summary>
            Logs a info message
            </summary>
            <param name="message">Message to log</param>
            <param name="logToFile">Should log to file?</param>
        </member>
        <member name="M:SRML.Console.Console.LogSuccess(System.String,System.Boolean)">
            <summary>
            Logs a success message
            </summary>
            <param name="message">Message to log</param>
            <param name="logToFile">Should log to file?</param>
        </member>
        <member name="M:SRML.Console.Console.LogWarning(System.String,System.Boolean)">
            <summary>
            Logs a warning message
            </summary>
            <param name="message">Message to log</param>
            <param name="logToFile">Should log to file?</param>
        </member>
        <member name="M:SRML.Console.Console.LogError(System.String,System.Boolean)">
            <summary>
            Logs an error message
            </summary>
            <param name="message">Message to log</param>
            <param name="logToFile">Should log to file?</param>
        </member>
        <member name="T:SRML.Console.ConsoleBinder">
            <summary>
            Binds user commands to the console command menu
            </summary>
        </member>
        <member name="M:SRML.Console.ConsoleBinder.ReadBinds">
            <summary>
            Reads all bindings
            </summary>
        </member>
        <member name="M:SRML.Console.ConsoleBinder.RegisterBind(System.String,System.String,System.String)">
            <summary>
            Registers a new bind
            </summary>
            <param name="id">The id of the button</param>
            <param name="text">The text to show on the button</param>
            <param name="command">The command to execute</param>
        </member>
        <member name="M:SRML.Console.ConsoleBinder.RemoveBind(System.String)">
            <summary>
            Removes a bind
            </summary>
            <param name="id">The id of the bind to remove</param>
            <returns>True if the bind got removed, false otherwise</returns>
        </member>
        <member name="M:SRML.Console.ConsoleBinder.RemoveAll">
            <summary>
            Removes all binds
            </summary>
        </member>
        <member name="M:SRML.Console.ConsoleBinder.GetAllBinds">
            <summary>
            Gets all the binds registered
            </summary>
        </member>
        <member name="T:SRML.Console.ConsoleButton">
            <summary>
            A button for the console menu
            </summary>
        </member>
        <member name="P:SRML.Console.ConsoleButton.Text">
            <summary>
            Text to display on the button
            </summary>
        </member>
        <member name="P:SRML.Console.ConsoleButton.Command">
            <summary>
            Command to execute when the button is pressed
            </summary>
        </member>
        <member name="M:SRML.Console.ConsoleButton.#ctor(System.String,System.String)">
            <summary>
            Creates a new console button button
            </summary>
            <param name="text">Text to display on the button</param>
            <param name="command">Command to execute when the button is pressed</param>
        </member>
        <member name="T:SRML.Console.ConsoleCommand">
            <summary>
            Base class for all console commands
            </summary>
        </member>
        <member name="P:SRML.Console.ConsoleCommand.ID">
            <summary>
            The ID of this command (Always lowercase)
            </summary>
        </member>
        <member name="P:SRML.Console.ConsoleCommand.Usage">
            <summary>
            The usage info of this command
            </summary>
        </member>
        <member name="P:SRML.Console.ConsoleCommand.Description">
            <summary>
            The description of this command
            </summary>
        </member>
        <member name="P:SRML.Console.ConsoleCommand.ExtendedDescription">
            <summary>
            The extended description of this command, with a description of each argument to
            display when you use help command on this command (Multiline is supported)
            </summary>
        </member>
        <member name="M:SRML.Console.ConsoleCommand.Execute(System.String[])">
            <summary>
            Executes the command
            </summary>
            <param name="args">The arguments passed in the console (null if no arguments are provided)</param>
            <returns>True if it executed, false otherwise</returns>
        </member>
        <member name="M:SRML.Console.ConsoleCommand.GetAutoComplete(System.Int32,System.String)">
            <summary>
            Gets the auto complete list (word filter is done by the system)
            </summary>
            <param name="argIndex">The index of the argument in the command string</param>
            <param name="argText">The text of the argument</param>
            <returns>The list of auto complete options</returns>
        </member>
        <member name="M:SRML.Console.ConsoleCommand.GetAutoComplete(System.Int32,System.String[])">
            <summary>
            Gets the auto complete list (word filter is done by the system)
            </summary>
            <param name="argIndex">The index of the argument in the command string</param>
            <param name="args">A list of inputted arguments</param>
            <returns>The list of auto complete options</returns>
        </member>
        <member name="M:SRML.Console.ConsoleCommand.ArgsOutOfBounds(System.Int32,System.Int32,System.Int32)">
            <summary>
            The arguments are out of bounds (either too many or too little)
            </summary>
            <param name="min">Amount of arguments</param>
            <param name="min">Minimun amount</param>
            <param name="max">Maximun amount</param>
            <returns>True if arguments are out of bounds, false otherwise</returns>
        </member>
        <member name="T:SRML.Console.ConsoleWindow">
            <summary>
            Draws the window for the in-game console
            </summary>
        </member>
        <member name="M:SRML.Console.ConsoleWindow.AttachWindow(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene)">
            <summary>
            Attachs the window to a scene
            </summary>
        </member>
        <member name="T:SRML.FileLogger">
            <summary>
            The logger for the log file
            </summary>
        </member>
        <member name="M:SRML.FileLogger.Init">
            <summary>
            Initializes the file logger (run this before Console.Init)
            </summary>
        </member>
        <member name="M:SRML.FileLogger.Log(System.String)">
            <summary>
            Logs a info message
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:SRML.FileLogger.LogWarning(System.String)">
            <summary>
            Logs a warning message
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:SRML.FileLogger.LogError(System.String)">
            <summary>
            Logs an error message
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="T:SRML.EnumPatcher">
            <summary>
            Allows adding values to any Enum
            </summary>
        </member>
        <member name="M:SRML.EnumPatcher.AddEnumValue``1(System.String)">
            <summary>
            Add a new enum value to the given <paramref name="T"/> with the first free value
            </summary>
            <param name="T">Type of enum to add the value to</param>
            <param name="name">Name of the new enum value</param>
            <returns>The new enum value</returns>
        </member>
        <member name="M:SRML.EnumPatcher.AddEnumValue(System.Type,System.String)">
            <summary>
            Add a new enum value to the given <paramref name="enumType"/> with the first free value
            </summary>
            <param name="enumType">Type of enum to add the value to</param>
            <param name="name">Name of the new enum value</param>
            <returns>The new enum value</returns>
        </member>
        <member name="M:SRML.EnumPatcher.AddEnumValue``1(System.Object,System.String)">
            <summary>
            Add a new value to the given <paramref name="T"/> 
            </summary>
            <param name="T">Enum to add the new value to</param>
            <param name="value">Value to add to the enum</param>
            <param name="name">The name of the new value</param>
        </member>
        <member name="M:SRML.EnumPatcher.AddEnumValue(System.Type,System.Object,System.String)">
            <summary>
            Add a new value to the given <paramref name="enumType"/> 
            </summary>
            <param name="enumType">Enum to add the new value to</param>
            <param name="value">Value to add to the enum</param>
            <param name="name">The name of the new value</param>
        </member>
        <member name="M:SRML.EnumPatcher.GetFirstFreeValue``1">
            <summary>
            Get first undefined value in an enum
            </summary>
            <param name="T"></param>
            <returns>The first undefined enum value</returns>
        </member>
        <member name="M:SRML.EnumPatcher.GetFirstFreeValue(System.Type)">
            <summary>
            Get first undefined value in an enum
            </summary>
            <param name="enumType"></param>
            <returns>The first undefined enum value</returns>
        </member>
        <member name="T:SRML.EnumTranslator">
            <summary>
            Serializable table that maps enum values from placeholder numerical values to their string counterparts
            Used to assure that enum values map properly between game loads, even if registration order changes
            Mapped values are always negative
            </summary>
        </member>
        <member name="M:SRML.EnumTranslator.GetFreeValue(System.Type)">
            <summary>
            Get the next free value for the given enumType
            </summary>
            <param name="enumType">The enum type</param>
            <returns>The next free value</returns>
        </member>
        <member name="M:SRML.EnumTranslator.GenerateTranslationTable(System.Collections.IList)">
            <summary>
            Generate a translation table for  a list of enumValues
            </summary>
            <param name="enumValues">List of enum values to translate</param>
        </member>
        <member name="M:SRML.EnumTranslator.FixMissingEnumValues">
            <summary>
            Replace missing enum values with default values, or remove them all together
            </summary>
        </member>
        <member name="M:SRML.EnumTranslator.TranslateTo(System.Object)">
            <summary>
            Translate an enum value
            </summary>
            <param name="val">Original enum value</param>
            <returns>Translated integer</returns>
        </member>
        <member name="M:SRML.EnumTranslator.RegisterEnumFixer``1(SRML.EnumTranslator.EnumFixerGenericDelegate{``0})">
            <summary>
            Register an EnumFixer that allows for objects of type <typeparamref name="T"/> to have their enum values processed by an enumtranslator 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="del"></param>
        </member>
        <member name="M:SRML.EnumTranslator.FixEnumValues(SRML.EnumTranslator,SRML.EnumTranslator.TranslationMode,System.Object)">
            <summary>
            Fix enum values in an object using the registered EnumFixer
            </summary>
            <param name="translator">the <see cref="T:SRML.EnumTranslator"/> to use for translating</param>
            <param name="mode">Whether to translate TO or FROM the translated form</param>
            <param name="toFix">Object to fix</param>
        </member>
        <member name="T:SRML.ErrorGUI">
            <summary>
            Class used to generate an error message 
            </summary>
        </member>
        <member name="M:SRML.FileSystem.CheckDirectory(System.String)">
            <summary>
            Checks if a path exists and creates it if it doesn't
            </summary>
            <param name="path">Path to be checked</param>
            <returns>returns the original path argument</returns>
        </member>
        <member name="M:SRML.FileSystem.GetMyPath">
            <summary>
            When called from a mod, gets the base path of that mod
            </summary>
            <returns>The base path of the current executing mod</returns>
        </member>
        <member name="M:SRML.FileSystem.GetConfigPath(SRML.SRMod)">
            <summary>
            Gets a mods config path 
            </summary>
            <param name="mod">The mod whose config path is needed</param>
            <returns>The config path</returns>
        </member>
        <member name="M:SRML.FileSystem.GetMyConfigPath">
            <summary>
            Gets the current mods config path
            </summary>
            <returns>The config path</returns>
        </member>
        <member name="T:SRML.HarmonyPatcher">
            <summary>
            Utility class to help manage the main SRML harmony instance
            </summary>
        </member>
        <member name="T:SRML.IntermodCommunication">
            <summary>
            Utilities for communication between mods
            </summary>
        </member>
        <member name="M:SRML.Main.PreLoad">
            <summary>
            Called before GameContext.Awake()
            </summary>
        </member>
        <member name="M:SRML.Main.Load">
            <summary>
            Called before GameContext.Start()
            </summary>
        </member>
        <member name="M:SRML.Main.PostLoad">
            <summary>
            Called after Load
            </summary>
        </member>
        <member name="M:SRML.IModEntryPoint.PreLoad">
            <summary>
            Called before <see cref="M:GameContext.Awake"/><br/>
            Used to register things such as enum values, and to do Harmony patching
            </summary>
        </member>
        <member name="M:SRML.IModEntryPoint.Load">
            <summary>
            Called before <see cref="M:GameContext.Start"/><br/>
            Used to register things that require a loaded GameContext
            </summary>
        </member>
        <member name="M:SRML.IModEntryPoint.PostLoad">
            <summary>
            Called after every mod's Load has finished (not a registry step)<br/>
            Used for editing existing assets in the game
            </summary>
        </member>
        <member name="M:SRML.SR.AchievementRegistry.RegisterModdedAchievement(AchievementsDirector.Achievement,AchievementsDirector.Tracker,SRML.SR.AchievementRegistry.Tier)">
            <summary>
            Register a modded achievement into the registry.
            </summary>
            <param name="ach">The id of the achievement to register.</param>
            <param name="track">The tracker to track achievement progress.</param>
            <param name="tier">The tier the achievement goes into.</param>
        </member>
        <member name="M:SRML.SR.AchievementRegistry.RegisterAchievmentTier(SRML.SR.AchievementRegistry.Tier,UnityEngine.Sprite)">
            <summary>
            Register an achievement tier into the registry.
            </summary>
            <param name="tier">The id of the tier.</param>
            <param name="icon">The icon to be displayed in the achievement UI.</param>
        </member>
        <member name="M:SRML.SR.AchievementRegistry.IsModdedAchievement(AchievementsDirector.Achievement)">
            <summary>
            Check if an achievement is modded.
            </summary>
            <param name="ach">The id of the achievement to check.</param>
            <returns>True if achievement id belongs to a modded achievement, otherwise false.</returns>
        </member>
        <member name="T:SRML.SR.AchievementRegistry.Tier">
            <summary>
            Tiers for an achievement to be put into.
            </summary>
        </member>
        <member name="M:SRML.SR.AmmoRegistry.RegisterAmmoPrefab(PlayerState.AmmoMode,UnityEngine.GameObject)">
            <summary>
            Register an ammo prefab to allow it to be put in a player's ammos (use <see cref="M:SRML.SR.AmmoRegistry.RegisterPlayerAmmo(PlayerState.AmmoMode,Identifiable.Id)"/>)
            </summary>
            <param name="mode"><see cref="T:PlayerState.AmmoMode"/> to register the prefab to</param>
            <param name="prefab"></param>
        </member>
        <member name="M:SRML.SR.AmmoRegistry.RegisterPlayerAmmo(PlayerState.AmmoMode,Identifiable.Id)">
            <summary>
            Allow an <paramref name="id"/> to be put into a players inventory
            </summary>
            <param name="mode">Which inventory to allow the <paramref name="id"/> into</param>
            <param name="id">The <see cref="T:Identifiable.Id"/> to allow</param>
        </member>
        <member name="M:SRML.SR.AmmoRegistry.RegisterSiloAmmo(SiloStorage.StorageType,Identifiable.Id)">
            <summary>
            Allow an Identifiable.Id to be put into a <see cref="T:SiloStorage"/> inventory
            </summary>
            <param name="typeId"></param>
            <param name="id"></param>
        </member>
        <member name="M:SRML.SR.AmmoRegistry.RegisterRefineryResource(Identifiable.Id)">
            <summary>
            Allow an Identifiable to be put into the Refinery
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:SRML.SR.ChromaRegistry.CreatePalette(System.Object,System.String)">
            <summary>
            Creates a <see cref="T:RanchDirector.Palette"/> and registers it into the enum
            </summary>
            <param name="value"></param>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SRML.SR.ChromaRegistry.CreatePaletteType(System.Object,System.String)">
            <summary>
            Creates a <see cref="T:RanchDirector.PaletteType"/> and registers it into the enum
            </summary>
            <param name="value"></param>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SRML.SR.ChromaRegistry.RegisterPaletteEntry(RanchDirector.PaletteEntry)">
            <summary>
            Registers a <see cref="T:RanchDirector.PaletteEntry"/>
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:SRML.SR.ChromaRegistry.IsModdedPalette(RanchDirector.Palette)">
            <summary>
            See if a <see cref="T:RanchDirector.Palette"/> is modded
            </summary>
            <param name="id"></param>
            <returns>True if given <see cref="T:RanchDirector.Palette"/> is from a mod</returns>
        </member>
        <member name="M:SRML.SR.ChromaRegistry.IsModdedPaletteType(RanchDirector.PaletteType)">
            <summary>
            See if a <see cref="T:RanchDirector.PaletteType"/> is modded
            </summary>
            <param name="id"></param>
            <returns>True if given <see cref="T:RanchDirector.PaletteType"/> is from a mod</returns>
        </member>
        <member name="M:SRML.SR.FashionRegistry.RegisterOffsetForFashion(Identifiable.Id,UnityEngine.Vector3,System.Func{AttachFashions,System.Boolean})">
            <summary>
            Registers an offset for a fashion.
            </summary>
            <param name="id">The <see cref="T:Identifiable.Id"/> of the fashion to offset.</param>
            <param name="offset">How far the fashion gets offset.</param>
            <param name="condition">The condition that the fashion gets offset in.</param>
        </member>
        <member name="M:SRML.SR.FashionRegistry.RegisterSlot(Fashion.Slot,System.String,SlimeAppearance.SlimeBone)">
            <summary>
            Registers a slot for a fashion to be placed in.
            </summary>
            <param name="slot">The <see cref="T:Fashion.Slot"/> that belongs to the slot.</param>
            <param name="path">The hierarchal path to the bone.</param>
            <param name="bone">The <see cref="T:SlimeAppearance.SlimeBone"/> that the slot attaches to.</param>
        </member>
        <member name="M:SRML.SR.FoodGroupRegistry.RegisterId(SlimeEat.FoodGroup,Identifiable.Id)">
            <summary>
            Adds an <see cref="T:Identifiable.Id"/> to a <see cref="T:SlimeEat.FoodGroup"/>.
            </summary>
            <param name="foodGroup">The <see cref="T:SlimeEat.FoodGroup"/> to add to.</param>
            <param name="id">The <see cref="T:Identifiable.Id"/> to be added.</param>
        </member>
        <member name="M:SRML.SR.FoodGroupRegistry.RegisterIdRange(SlimeEat.FoodGroup,System.Collections.Generic.ICollection{Identifiable.Id})">
            <summary>
            Registers a range of <see cref="T:Identifiable.Id"/>s into a <see cref="T:SlimeEat.FoodGroup"/>.
            </summary>
            <param name="foodGroup">The <see cref="T:SlimeEat.FoodGroup"/> to add to.</param>
            <param name="idRange">The <see cref="T:Identifiable.Id"/>s to be added.</param>
        </member>
        <member name="M:SRML.SR.FoodGroupRegistry.RegisterIdRange(SlimeEat.FoodGroup,Identifiable.Id[])">
            <summary>
            Registers a range of <see cref="T:Identifiable.Id"/>s into a <see cref="T:SlimeEat.FoodGroup"/>.
            </summary>
            <param name="foodGroup">The <see cref="T:SlimeEat.FoodGroup"/> to add to.</param>
            <param name="idRange">The <see cref="T:Identifiable.Id"/>s to be added.</param>
        </member>
        <member name="M:SRML.SR.FoodGroupRegistry.RegisterIdRangeToFoodGroup(System.Collections.Generic.ICollection{Identifiable.Id})">
            <summary>
            Registers a range of <see cref="T:Identifiable.Id"/>s into a <see cref="T:SlimeEat.FoodGroup"/>.
            </summary>
            <param name="idRange">The <see cref="T:Identifiable.Id"/>s to be added.</param>
        </member>
        <member name="M:SRML.SR.FoodGroupRegistry.RegisterIdRangeToFoodGroup(Identifiable.Id[])">
            <summary>
            Registers a range of <see cref="T:Identifiable.Id"/>s into a <see cref="T:SlimeEat.FoodGroup"/>.
            </summary>
            <param name="idRange">The <see cref="T:Identifiable.Id"/>s to be added.</param>
        </member>
        <member name="M:SRML.SR.FoodGroupRegistry.UnregisterId(SlimeEat.FoodGroup,Identifiable.Id)">
            <summary>
            Removes an <see cref="T:Identifiable.Id"/> from a <see cref="T:SlimeEat.FoodGroup"/>.
            </summary>
            <param name="foodGroup">The <see cref="T:SlimeEat.FoodGroup"/> to be removed from.</param>
            <param name="id">The <see cref="T:Identifiable.Id"/> to be removed.</param>
        </member>
        <member name="M:SRML.SR.FoodGroupRegistry.UnregisterFromFoodGroup(Identifiable.Id,SlimeEat.FoodGroup)">
            <summary>
            Removes an <see cref="T:Identifiable.Id"/> from a <see cref="T:SlimeEat.FoodGroup"/>.
            </summary>
            <param name="id">The <see cref="T:Identifiable.Id"/> to be removed.</param>
            <param name="foodGroup">The <see cref="T:SlimeEat.FoodGroup"/> to be removed from.</param>
        </member>
        <member name="M:SRML.SR.FoodGroupRegistry.RegisterToFoodGroup(Identifiable.Id,SlimeEat.FoodGroup)">
            <summary>
            Adds an <see cref="T:Identifiable.Id"/> to a <see cref="T:SlimeEat.FoodGroup"/>.
            </summary>
            <param name="id">The <see cref="T:Identifiable.Id"/> to be added.</param>
            <param name="foodGroup">The <see cref="T:SlimeEat.FoodGroup"/> to add to.</param>
        </member>
        <member name="M:SRML.SR.FoodGroupRegistry.RegisterToFoodGroup(Identifiable.Id)">
            <summary>
            Automatically adds an <see cref="T:Identifiable.Id"/> to a <see cref="T:SlimeEat.FoodGroup"/>.
            </summary>
            <param name="id">The <see cref="T:Identifiable.Id"/> to be added.</param>
        </member>
        <member name="M:SRML.SR.FoodGroupRegistry.RegisterFoodGroupRule(System.Func{Identifiable.Id,System.Boolean},SlimeEat.FoodGroup)">
            <summary>
            Registers a rule for what <see cref="T:SlimeEat.FoodGroup"/> to register a <see cref="T:Identifiable.Id"/> into.
            </summary>
            <param name="rule">The condition that the <see cref="T:Identifiable.Id"/> is registered into the <see cref="T:SlimeEat.FoodGroup"/></param>
            <param name="foodGroup">The <see cref="T:SlimeEat.FoodGroup"/> to register an <see cref="T:Identifiable.Id"/> into.</param>
        </member>
        <member name="M:SRML.SR.CorporatePartnerRegistry.AddRank(System.Int32,System.Int32,SRML.SR.CorporatePartnerRegistry.RewardEntry[],UnityEngine.Sprite)">
            <summary>
            Adds a rank into the 7Zee Rewards catalogue. If the rank already exists, then combine with the pre-existing one.
            </summary>
            <param name="level">The level of the rank.</param>
            <param name="cost">How much it costs to purchase the rank.</param>
            <param name="rewards">The rewards for the rank.</param>
            <param name="banner">The banner to show behind the rank name. If null, then it will set to the highest rank's banner.</param>
        </member>
        <member name="M:SRML.SR.CorporatePartnerRegistry.AddToRank(System.Int32,SRML.SR.CorporatePartnerRegistry.RewardEntry)">
            <summary>
            Adds a reward to a rank.
            </summary>
            <param name="level">The rank to add a reward to.</param>
            <param name="entry">The <see cref="T:SRML.SR.CorporatePartnerRegistry.RewardEntry"/> to add.</param>
        </member>
        <member name="T:SRML.SR.CorporatePartnerRegistry.RewardEntry">
            <summary>
            A special way to register rewards with a unique translation key.
            </summary>
        </member>
        <member name="M:SRML.SR.RegionSetRegistry.RegisterRegion(MonomiPark.SlimeRancher.Regions.RegionRegistry.RegionSetId,BoundsQuadtree{MonomiPark.SlimeRancher.Regions.Region})">
            <summary>
            Registers a region into the <see cref="T:MonomiPark.SlimeRancher.Regions.RegionRegistry"/>.
            </summary>
            <param name="region">The <see cref="T:MonomiPark.SlimeRancher.Regions.RegionRegistry.RegionSetId"/> of the region.</param>
            <param name="bounds">The bounds and values of the region.</param>
        </member>
        <member name="M:SRML.SR.RegionSetRegistry.RegisterZoneIntoRegion(ZoneDirector.Zone,MonomiPark.SlimeRancher.Regions.RegionRegistry.RegionSetId)">
            <summary>
            Adds a zone into a region.
            </summary>
            <param name="zone">The <see cref="T:ZoneDirector.Zone"/> to be added.</param>
            <param name="region">The <see cref="T:MonomiPark.SlimeRancher.Regions.RegionRegistry.RegionSetId"/> of the region to add to.</param>
        </member>
        <member name="T:SRML.SR.SaveSystem.StringRegistry">
            <summary>
            Class for handling string ID's for the save system
            </summary>
        </member>
        <member name="T:SRML.SR.SaveSystem.ExtendedData">
            <summary>
            Class allowing for the addition of arbitrary data to Actors, similar to Minecraft's NBT system
            </summary>
        </member>
        <member name="M:SRML.SR.SaveSystem.ExtendedData.InstantiateActorWithData(UnityEngine.GameObject,MonomiPark.SlimeRancher.Regions.RegionRegistry.RegionSetId,UnityEngine.Vector3,UnityEngine.Quaternion,SRML.SR.SaveSystem.Data.CompoundDataPiece)">
            <summary>
            Instantiate an an Actor with the given data
            </summary>
            <param name="prefab"></param>
            <param name="id"></param>
            <param name="pos"></param>
            <param name="rot"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:SRML.SR.SaveSystem.ExtendedData.Participant">
            <summary>
            A participant of the data system
            </summary>
        </member>
        <member name="T:SRML.SR.SaveSystem.ExtendedData.TransformableParticipant">
            <summary>
            A participant of the data system. When on a slime, if the slime transforms, it will copy to the resulting object.
            </summary>
        </member>
        <member name="M:SRML.SR.SaveSystem.SaveRegistry.RegisterSerializableActorModel``1(System.Int32)">
            <summary>
            Register a serializable <see cref="T:MonomiPark.SlimeRancher.DataModel.ActorModel"/>
            </summary>
            <typeparam name="T">The actor model to register</typeparam>
            <param name="id">The mod specific integer ID that the save system will use to refer to this <see cref="T:MonomiPark.SlimeRancher.DataModel.ActorModel"/></param>
        </member>
        <member name="M:SRML.SR.SaveSystem.SaveRegistry.RegisterSerializableGadgetModel``1(System.Int32)">
            <summary>
            Register a serializable <see cref="T:MonomiPark.SlimeRancher.DataModel.GadgetModel"/>
            </summary>
            <typeparam name="T">Gadget model to register</typeparam>
            <param name="id">The mod specific integer ID that the save system will use to refer to this <see cref="T:MonomiPark.SlimeRancher.DataModel.GadgetModel"/></param>
        </member>
        <member name="M:SRML.SR.SaveSystem.SaveRegistry.RegisterSerializableLandPlotModel``1(System.Int32)">
            <summary>
            Register a serializable <see cref="T:MonomiPark.SlimeRancher.DataModel.LandPlotModel"/>
            </summary>
            <typeparam name="T">LandPlot model to register</typeparam>
            <param name="id">The mod specific integer ID that the save system will use to refer to this <see cref="T:MonomiPark.SlimeRancher.DataModel.LandPlotModel"/></param>
        </member>
        <member name="M:SRML.SR.SaveSystem.SaveRegistry.RegisterDataParticipant``1">
            <summary>
            Register a <see cref="T:UnityEngine.Component"/> that will take part in the extended data system
            </summary>
            <typeparam name="T">Type of the participant to register</typeparam>
        </member>
        <member name="M:SRML.SR.SnareRegistry.RegisterAsSnareable(Identifiable.Id)">
            <summary>
            Allows an <see cref="T:Identifiable.Id"/> to go onto a gordo snare.
            </summary>
            <param name="id">The <see cref="T:Identifiable.Id"/> to register.</param>
        </member>
        <member name="M:SRML.SR.StyleRegistry.IsSecretStylesInstalled">
            <returns><see langword="true"/> if secret styles is installed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SRML.SR.StyleRegistry.RegisterSecretStyle(SlimeDefinition,SlimeAppearance)">
            <summary>
            Register a secret style in a <see cref="T:SlimeDefinition"/>
            </summary>
            <param name="definition">Slime definition to register the secret style for</param>
            <param name="exoticAppearance">Secret style to register</param>
        </member>
        <member name="M:SRML.SR.TargetingRegistry.RegisterTargeter(System.Predicate{Identifiable.Id},System.Func{Identifiable.Id,MessageBundle,MessageBundle,System.String},System.Func{Identifiable.Id,MessageBundle,MessageBundle,System.String})">
            <summary>
            Registers a targeter.
            </summary>
            <param name="condition">The condition in which the targeter is used.</param>
            <param name="name">A function getting the name of the targeted object, with the first bundle being the UI bundle, and the second being the pedia bundle.</param>
            <param name="desc">A function getting the description of the targeted object, with the first bundle being the UI bundle, and the second being the pedia bundle.</param>
        </member>
        <member name="M:SRML.SR.TargetingRegistry.ComposeDescription(MessageBundle,System.String,System.String)">
            <summary>
            Combines two keys' resulting translations.
            </summary>
            <param name="bundle">The bundle containing the keys.</param>
            <param name="key1">The key to be added to.</param>
            <param name="key2">The key to be added.</param>
            <returns>The composed description.</returns>
        </member>
        <member name="M:SRML.SR.TargetingRegistry.ComposeTypeDescription(MessageBundle,System.String)">
            <summary>
            Composes a type description translation.
            </summary>
            <param name="bundle">The bundle containing the type key.</param>
            <param name="typeKey">The key belonging to the type's translation.</param>
            <returns></returns>
        </member>
        <member name="M:SRML.SR.TargetingRegistry.ComposeDietDescription(MessageBundle,System.String)">
            <summary>
            Composes a diet description translation.
            </summary>
            <param name="bundle">The bundle containing the diet key.</param>
            <param name="typeKey">The key belonging to the diet's translation.</param>
        </member>
        <member name="M:SRML.SR.Utils.IdHandlerUtils.CreateIdInstance``1(System.String)">
            <summary>
            Create a new instance of an IdHandler
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:SRML.SR.DroneRegistry.RegisterBasicTarget(Identifiable.Id)">
            <summary>
            Register an <see cref="T:Identifiable.Id"/> as a drone target.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:SRML.SR.ExchangeOfferRegistry.RegisterRancher(ExchangeDirector.Rancher)">
            <summary>
            Registers a rancher.
            </summary>
            <param name="rancher"></param>
        </member>
        <member name="M:SRML.SR.ExchangeOfferRegistry.RegisterRancherID(System.String)">
            <summary>
            Registers a rancher's id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:SRML.SR.ExchangeOfferRegistry.RegisterOfferID(System.String)">
            <summary>
            Registers an offer id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:SRML.SR.ExchangeOfferRegistry.RegisterCategory(ExchangeDirector.Category,Identifiable.Id[])">
            <summary>
            Registers a category for exchange requests/rewards
            </summary>
            <param name="category">The category to register</param>
            <param name="ids">The ids in the category</param>
        </member>
        <member name="M:SRML.SR.ExchangeOfferRegistry.RegisterUnlockableItem(Identifiable.Id,ProgressDirector.ProgressType,System.Int32)">
            <summary>
            Registers an item to be unlocked in a category
            </summary>
            <param name="item">The <see cref="T:Identifiable.Id"/> to be unlocked.</param>
            <param name="type">The progress required to unlock it</param>
            <param name="countForValue">The value used in the offer generator for count</param>
        </member>
        <member name="M:SRML.SR.ExchangeOfferRegistry.RegisterInitialItem(Identifiable.Id,System.Int32)">
            <summary>
            Registers an item that's automatically unlocked in a category
            </summary>
            <param name="item">The <see cref="T:Identifiable.Id"/> to be unlocked.</param>
            <param name="countForValue">The value used in the offer generator for count</param>
        </member>
        <member name="M:SRML.SR.ExchangeOfferRegistry.IsCustom(System.String)">
            <summary>
            Checks if a rancher or offer ID is modded.
            </summary>
            <param name="id">The ID to check.</param>
            <returns>True if the ID belongs to a mod, otherwise false.</returns>
        </member>
        <member name="M:SRML.SR.ExchangeOfferRegistry.IsCustom(ExchangeDirector.Rancher)">
            <summary>
            Checks if a rancher is modded.
            </summary>
            <param name="entry">The rancher to check.</param>
            <returns>True if the rancher belongs to a mod, otherwise false.</returns>
        </member>
        <member name="M:SRML.SR.ExchangeOfferRegistry.IsCustom(ExchangeDirector.Category)">
            <summary>
            Checks if a category is modded.
            </summary>
            <param name="cat">The category to check.</param>
            <returns>True if the category belongs to a mod, otherwise false.</returns>
        </member>
        <member name="M:SRML.SR.GadgetRegistry.CreateGadgetId(System.Object,System.String)">
            <summary>
            Creates a <see cref="T:Gadget.Id"/>.
            </summary>
            <param name="value">What value is assigned to the <see cref="T:Gadget.Id"/>.</param>
            <param name="name">The name of the <see cref="T:Gadget.Id"/>.</param>
            <returns>The created <see cref="T:Gadget.Id"/>.</returns>
            <exception cref="T:System.Exception">Throws if ran outside of PreLoad</exception>
        </member>
        <member name="M:SRML.SR.GadgetRegistry.IsModdedGadget(Gadget.Id)">
            <summary>
            Check if a <see cref="T:Gadget.Id"/> belongs to a modded gadget.
            </summary>
            <param name="id">The <see cref="T:Gadget.Id"/> to check.</param>
            <returns>True if <see cref="T:Gadget.Id"/> belongs to a modded gadget, otherwise false.</returns>
        </member>
        <member name="M:SRML.SR.GadgetRegistry.RegisterIdentifiableMapping(Gadget.Id,Identifiable.Id)">
            <summary>
            Associates an <see cref="T:Gadget.Id"/> with a <see cref="T:Identifiable.Id"/>
            </summary>
            <param name="id">The <see cref="T:Gadget.Id"/> to associate.</param>
            <param name="id2">The <see cref="T:Identifiable.Id"/> to associate</param>
        </member>
        <member name="M:SRML.SR.GadgetRegistry.RegisterBlueprintLock(Gadget.Id,SRML.SR.GadgetRegistry.BlueprintLockCreateDelegate)">
            <summary>
            Registers a locker for a blueprint.
            </summary>
            <param name="id">The <see cref="T:Gadget.Id"/> of the blueprint.</param>
            <param name="creator">The locker for the blueprint.</param>
        </member>
        <member name="M:SRML.SR.GadgetRegistry.RegisterDefaultBlueprint(Gadget.Id)">
            <summary>
            Register a blueprint.
            </summary>
            <param name="id">The <see cref="T:Gadget.Id"/> of the blueprint.</param>
        </member>
        <member name="M:SRML.SR.GadgetRegistry.RegisterDefaultAvailableBlueprint(Gadget.Id)">
            <summary>
            Register a blueprint that's automatically available.
            </summary>
            <param name="id">The <see cref="T:Gadget.Id"/> of the blueprint.</param>
        </member>
        <member name="M:SRML.SR.GadgetRegistry.Categorize(Gadget.Id,SRML.SR.GadgetCategorization.Rule)">
            <summary>
            Manually set the <see cref="T:SRML.SR.GadgetCategorization.Rule"/> of the <see cref="T:Gadget.Id"/>
            </summary>
            <param name="id"></param>
            <param name="rule"></param>
        </member>
        <member name="M:SRML.SR.GadgetRegistry.Uncategorize(Gadget.Id)">
            <summary>
            Remove all instances of an <see cref="T:Gadget.Id"/> from every class in <see cref="T:Gadget"/>
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:SRML.SR.GadgetRegistry.CategorizeId(Gadget.Id)">
            <summary>
            Puts a <see cref="T:Gadget.Id"/> into one of the vanilla categories based on its name prefix (see <see cref="T:Gadget"/>)<br />
            WARNING: Will not categorize decorations properly!
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:SRML.SR.GadgetRegistry.CategorizeId(Gadget.Id,SRML.SR.GadgetCategorization.Rule)">
            <summary>
            Put an <see cref="T:Gadget.Id"/> into one of the vanilla categories
            </summary>
            <param name="id"></param>
            <param name="category"></param>
        </member>
        <member name="M:SRML.SR.IdentifiableRegistry.CreateIdentifiableId(System.Object,System.String)">
            <summary>
            Creates an <see cref="T:Identifiable.Id"/>.
            </summary>
            <param name="value">What value is assigned to the <see cref="T:Identifiable.Id"/>.</param>
            <param name="name">The name of the <see cref="T:Identifiable.Id"/>.</param>
            <returns>The created <see cref="T:Identifiable.Id"/>.</returns>
            <exception cref="T:System.Exception">Throws if ran outside of PreLoad</exception>
        </member>
        <member name="M:SRML.SR.IdentifiableRegistry.CreateIdentifiableId(System.Object,System.String,System.Boolean)">
            <summary>
            Creates an <see cref="T:Identifiable.Id"/>.
            </summary>
            <param name="value">What value is assigned to the <see cref="T:Identifiable.Id"/>.</param>
            <param name="name">The name of the <see cref="T:Identifiable.Id"/>.</param>
            <param name="shouldCategorize">If the <see cref="T:Identifiable.Id"/> should automatically be categorized into <see cref="T:Identifiable"/>'s classes.</param>
            <returns>The created <see cref="T:Identifiable.Id"/>.</returns>
            <exception cref="T:System.Exception">Throws if ran outside of PreLoad</exception>
        </member>
        <member name="M:SRML.SR.IdentifiableRegistry.Categorize(Identifiable.Id,SRML.SR.IdentifiableCategorization.Rule)">
            <summary>
            Manually set the <see cref="T:SRML.SR.IdentifiableCategorization.Rule"/> of the <see cref="T:Identifiable.Id"/>
            </summary>
            <param name="id"></param>
            <param name="rule"></param>
        </member>
        <member name="M:SRML.SR.IdentifiableRegistry.Uncategorize(Identifiable.Id)">
            <summary>
            Remove all instances of an <see cref="T:Identifiable.Id"/> from every class in <see cref="T:Identifiable"/>
            </summary>
            <param name="id"></param>
            <param name="rule"></param>
        </member>
        <member name="M:SRML.SR.IdentifiableRegistry.IsModdedIdentifiable(Identifiable.Id)">
            <summary>
            Check if an <see cref="T:Identifiable.Id"/> was registered by a mod
            </summary>
            <param name="id"></param>
            <returns>True if the <see cref="T:Identifiable.Id"/> was registered by a mod, otherwise false.</returns>
        </member>
        <member name="M:SRML.SR.IdentifiableRegistry.GetIdentifiablesForMod(System.String)">
            <summary>
            Gets every <see cref="T:Identifiable.Id"/> registered by a mod.
            </summary>
            <param name="id">The ID of the mod to check.</param>
            <returns>All <see cref="T:Identifiable.Id"/>s reigstered by a mod.</returns>
        </member>
        <member name="M:SRML.SR.IdentifiableRegistry.RegisterPrefixRule(System.String,SRML.SR.IdentifiableCategorization.Rule)">
            <summary>
            Registers a rule for an id prefix to link to
            </summary>
            <param name="prefix">The prefix for the id to check for.</param>
            <param name="rule">The rule that the specified prefix links to.</param>
        </member>
        <member name="M:SRML.SR.IdentifiableRegistry.RegisterSuffixRule(System.String,SRML.SR.IdentifiableCategorization.Rule)">
            <summary>
            Registers a rule for an id suffix to link to
            </summary>
            <param name="suffix">The suffix for the id to check for.</param>
            <param name="rule">The rule that the specified prefix links to.</param>
        </member>
        <member name="M:SRML.SR.IdentifiableRegistry.CategorizeId(Identifiable.Id)">
            <summary>
            Puts an <see cref="T:Identifiable.Id"/> into one of the vanilla categories based on its name (see <see cref="T:LookupDirector"/>)
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:SRML.SR.IdentifiableRegistry.CategorizeId(Identifiable.Id,SRML.SR.IdentifiableCategorization.Rule)">
            <summary>
            Put an <see cref="T:Identifiable.Id"/> into one of the vanilla categories
            </summary>
            <param name="id"></param>
            <param name="category"></param>
        </member>
        <member name="M:SRML.SR.BindingRegistry.RegisterBind(InControl.PlayerAction)">
            <summary>
            Register a keybind into the options UI.
            </summary>
            <param name="action">The action associated with the keybind.</param>
        </member>
        <member name="M:SRML.SR.BindingRegistry.RegisterAction(System.String)">
            <summary>
            Creates and registers a <see cref="T:InControl.PlayerAction"/>.
            </summary>
            <param name="name">The name of the action.</param>
            <returns>The created action</returns>
        </member>
        <member name="M:SRML.SR.BindingRegistry.RegisterBindedAction(System.String)">
            <summary>
            Creates and registers a <see cref="T:InControl.PlayerAction"/>, then registers it into the options UI.
            </summary>
            <param name="name">The name of the action.</param>
            <returns>The created action</returns>
        </member>
        <member name="M:SRML.SR.BindingRegistry.RegisterBindedTranslatedAction(System.String,System.String)">
            <summary>
            Creates and registers a <see cref="T:InControl.PlayerAction"/>, adds it into the options UI, and adds a translation.
            </summary>
            <param name="name">The name of the action.</param>
            <param name="translation">The translated name of the action.</param>
            <returns>The created action</returns>
        </member>
        <member name="M:SRML.SR.BindingRegistry.IsModdedAction(InControl.PlayerAction)">
            <summary>
            Check if an action is modded.
            </summary>
            <param name="action">The action to check.</param>
            <returns>True if action belongs to a mod, otherwise false.</returns>
        </member>
        <member name="M:SRML.SR.BindingRegistry.RegisterActions(System.Type)">
            <summary>
            Register all <see cref="T:InControl.PlayerAction"/>'s in a Type
            </summary>
            <param name="type">Type holding the <see cref="T:InControl.PlayerAction"/>'s</param>
        </member>
        <member name="M:SRML.SR.LandPlotRegistry.CreateLandPlotId(System.Object,System.String)">
            <summary>
            Creates a <see cref="T:LandPlot.Id"/>.
            </summary>
            <param name="value">What value is assigned to the <see cref="T:LandPlot.Id"/>.</param>
            <param name="name">The name of the <see cref="T:LandPlot.Id"/>.</param>
            <returns>The created <see cref="T:LandPlot.Id"/>.</returns>
            <exception cref="T:System.Exception">Throws if ran outside of PreLoad</exception>
        </member>
        <member name="M:SRML.SR.LandPlotRegistry.IsModdedLandPlot(LandPlot.Id)">
            <summary>
            Check if an <see cref="T:Identifiable.Id"/> was registered by a mod
            </summary>
            <param name="id"></param>
            <returns>True if the <see cref="T:Identifiable.Id"/> was registered by a mod, otherwise false.</returns>
        </member>
        <member name="M:SRML.SR.LandPlotRegistry.RegisterPurchasableLandPlot(SRML.SR.LandPlotRegistry.LandPlotShopEntry)">
            <summary>
            Registers a land plot.
            </summary>
            <param name="entry">The land plot to register.</param>
        </member>
        <member name="M:SRML.SR.LandPlotUpgradeRegistry.CreateLandPlotUpgrade(System.Object,System.String)">
            <summary>
            Creates a <see cref="T:LandPlot.Upgrade"/>.
            </summary>
            <param name="value">What value is assigned to the <see cref="T:LandPlot.Upgrade"/>.</param>
            <param name="name">The name of the <see cref="T:LandPlot.Upgrade"/>.</param>
            <returns>The created <see cref="T:LandPlot.Upgrade"/>.</returns>
            <exception cref="T:System.Exception">Throws if ran outside of PreLoad</exception>
        </member>
        <member name="M:SRML.SR.LandPlotUpgradeRegistry.RegisterPurchasableUpgrade``1(SRML.SR.LandPlotUpgradeRegistry.UpgradeShopEntry)">
            <summary>
            Registers an land plot upgrade.
            </summary>
            <typeparam name="T">The type of land plot to register it to.</typeparam>
            <param name="entry">The upgrade to register.</param>
        </member>
        <member name="M:SRML.SR.LandPlotUpgradeRegistry.RegisterPlotUpgrader``1(LandPlot.Id)">
            <summary>
            Registers a <see cref="T:PlotUpgrader"/> to a land plot.
            </summary>
            <typeparam name="T">The <see cref="T:PlotUpgrader"/> to register.</typeparam>
            <param name="plot">The <see cref="T:LandPlot.Id"/> to register the <see cref="T:PlotUpgrader"/> to</param>
            <exception cref="T:System.ArgumentException">Throws if the <see cref="T:PlotUpgrader"/> is already registered.</exception>
        </member>
        <member name="M:SRML.SR.MailRegistry.MailEntry.SetReadCallback(System.Action{MailDirector,MailDirector.Mail})">
            <summary>
            Sets the callback of the <see cref="T:SRML.SR.MailRegistry.MailEntry"/>.
            </summary>
            <param name="onReadCallback">The callback</param>
            <returns></returns>
        </member>
        <member name="M:SRML.SR.MailRegistry.MailEntry.SetFromTranslation(System.String)">
            <summary>
            Sets the from translation.
            </summary>
            <param name="text">The translated text.</param>
            <returns></returns>
        </member>
        <member name="M:SRML.SR.MailRegistry.MailEntry.SetBodyTranslation(System.String)">
            <summary>
            Sets the body translation.
            </summary>
            <param name="text">The translated text.</param>
        </member>
        <member name="M:SRML.SR.MailRegistry.MailEntry.SetSubjectTranslation(System.String)">
            <summary>
            Sets the subject translation.
            </summary>
            <param name="text">The translated text.</param>
        </member>
        <member name="M:SRML.SR.MailRegistry.RegisterMailEntry(SRML.SR.MailRegistry.MailEntry)">
            <summary>
            Registers a <see cref="T:SRML.SR.MailRegistry.MailEntry"/>.
            </summary>
            <param name="entry">The <see cref="T:SRML.SR.MailRegistry.MailEntry"/> to register.</param>
            <returns>The registered <see cref="T:SRML.SR.MailRegistry.MailEntry"/></returns>
        </member>
        <member name="M:SRML.SR.MailRegistry.RegisterMailEntry(System.String)">
            <summary>
            Registers a <see cref="T:SRML.SR.MailRegistry.MailEntry"/>.
            </summary>
            <param name="key">The key of the <see cref="T:SRML.SR.MailRegistry.MailEntry"/> to register.</param>
            <returns>The registered <see cref="T:SRML.SR.MailRegistry.MailEntry"/></returns>
        </member>
        <member name="M:SRML.SR.PediaRegistry.GetDefaultRenderer(SRML.SR.PediaRegistry.DisplaySetting)">
            <summary>
            Gets the default renderer for a Slimepedia entry.
            </summary>
            <param name="setting">The setting to get the renderer from.</param>
            <returns>The default renderer for the specified setting.</returns>
        </member>
        <member name="M:SRML.SR.PediaRegistry.CreatePediaId(System.Object,System.String)">
            <summary>
            Creates a <see cref="T:PediaDirector.Id"/>.
            </summary>
            <param name="value">What value is assigned to the <see cref="T:PediaDirector.Id"/>.</param>
            <param name="name">The name of the <see cref="T:PediaDirector.Id"/>.</param>
            <returns>The created <see cref="T:PediaDirector.Id"/>.</returns>
            <exception cref="T:System.Exception">Throws if ran outside of PreLoad</exception>
        </member>
        <member name="M:SRML.SR.PediaRegistry.RegisterPediaTab(SRML.SR.PediaRegistry.PediaTab)">
            <summary>
            Registers a tab for the Slimepedia.
            </summary>
            <param name="tab">The tab to register</param>
        </member>
        <member name="M:SRML.SR.PediaRegistry.RegisterIdEntry(PediaDirector.IdEntry)">
            <summary>
            Registers a <see cref="T:PediaDirector.IdEntry"/> into the Slimepedia.
            </summary>
            <param name="entry">The <see cref="T:PediaDirector.IdEntry"/> to register.</param>
        </member>
        <member name="M:SRML.SR.PediaRegistry.RegisterIdEntry(PediaDirector.Id,UnityEngine.Sprite)">
            <summary>
            Creates and registers a <see cref="T:PediaDirector.IdEntry"/>.
            </summary>
            <param name="id">The <see cref="T:PediaDirector.Id"/> belonging to the entry.</param>
            <param name="icon">The icon belonging to the entry.</param>
        </member>
        <member name="M:SRML.SR.PediaRegistry.RegisterRenderer(PediaDirector.Id,SRML.SR.PediaRegistry.IPediaRenderer)">
            <summary>
            Registers an entry renderer for the Slimepedia.
            </summary>
            <param name="id">The <see cref="T:PediaDirector.Id"/> assigned to the entry.</param>
            <param name="renderer">The renderer the Slimepedia entry should use.</param>
        </member>
        <member name="M:SRML.SR.PediaRegistry.RegisterInitialPediaEntry(PediaDirector.Id)">
            <summary>
            Registers an entry to already be unlocked in a new game
            </summary>
            <param name="id">The <see cref="T:PediaDirector.Id"/> that belongs to the entry.</param>
        </member>
        <member name="M:SRML.SR.PediaRegistry.RegisterIdentifiableMapping(PediaDirector.IdentMapEntry)">
            <summary>
            Creates a link between an <see cref="T:Identifiable.Id"/> and a <see cref="T:PediaDirector.Id"/>.
            </summary>
            <param name="entry">The entry mapping both values.</param>
        </member>
        <member name="M:SRML.SR.PediaRegistry.RegisterIdentifiableMapping(PediaDirector.Id,Identifiable.Id)">
            <summary>
            Creates a link between an <see cref="T:Identifiable.Id"/> and a <see cref="T:PediaDirector.Id"/>.
            </summary>
            <param name="pedia">The <see cref="T:PediaDirector.Id"/> to link.</param>
            <param name="ident">The <see cref="T:Identifiable.Id"/> to link.</param>
        </member>
        <member name="M:SRML.SR.PediaRegistry.SortPediaCategory(SRML.SR.PediaRegistry.PediaCategory,System.Collections.Generic.IComparer{PediaDirector.Id})">
            <summary>
            Sorts a Slimepedia category based on a rule.
            </summary>
            <param name="category">The Slimepedia category to sort.</param>
            <param name="comparer">The rules to sort it.</param>
        </member>
        <member name="M:SRML.SR.PediaRegistry.SetPediaCategory(PediaDirector.Id,SRML.SR.PediaRegistry.PediaCategory)">
            <summary>
            Assigns a <see cref="T:PediaDirector.Id"/> to a Slimepedia category.
            </summary>
            <param name="id">The <see cref="T:PediaDirector.Id"/> to assign.</param>
            <param name="category">The Slimepedia category to assign the <see cref="T:PediaDirector.Id"/> to.</param>
        </member>
        <member name="M:SRML.SR.PlantSlotRegistry.RegisterGardenCatcherPatcher(SRML.SR.PlantSlotRegistry.GardenPatchDelegate)">
            <summary>
            Registers an event to be run when a <see cref="T:GardenCatcher"/> awakes.
            </summary>
            <param name="del">The event to be ran.</param>
        </member>
        <member name="M:SRML.SR.PlantSlotRegistry.RegisterPlantSlot(GardenCatcher.PlantSlot)">
            <summary>
            Registers a link between a plant plot and an <see cref="T:Identifiable.Id"/>.
            </summary>
            <param name="plantSlot">The entry of the link.</param>
        </member>
        <member name="M:SRML.SR.PlantSlotRegistry.RegisterPlantSlotFor(System.Predicate{GardenCatcher},GardenCatcher.PlantSlot)">
            <summary>
            Registers a link between a plant plot and an <see cref="T:Identifiable.Id"/>, which only is used if a condition is met.
            </summary>
            <param name="condition">The condition that the link is established.</param>
            <param name="slot">The entry of the link.</param>
        </member>
        <member name="T:SRML.SR.PurchasableUIRegistry.PurchasableUIPredicate">
            <summary>
            Predicate for choosing purchasable ui's
            </summary>
            <param name="uiType">The type of the Purchasable UI</param>
            <param name="ui">The UI instance</param>
            <returns></returns>
        </member>
        <member name="T:SRML.SR.PurchasableUIRegistry.PurchasableCreatorDelegate">
            <summary>
            Creates purchasables on demand
            </summary>
            <param name="ui">The <see cref="T:BaseUI"/> that the <see cref="T:PurchaseUI.Purchasable"/> will be added to</param>
            <returns></returns>
        </member>
        <member name="T:SRML.SR.PurchasableUIRegistry.PurchasableCreatorDelegateGeneric`1">
            <summary>
            Creates a purchasable on demand
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ui">The UI that the <see cref="T:PurchaseUI.Purchasable"/> will be added to</param>
            <returns></returns>
        </member>
        <member name="T:SRML.SR.PurchasableUIRegistry.PurchasableManipulatorDelegateGeneric`1">
            <summary>
            Delegate for arbitarily manipulating a list of purchasables
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ui"></param>
            <param name="purchasables"></param>
        </member>
        <member name="T:SRML.SR.PurchasableUIRegistry.PurchasableManipulatorDelegate">
            <summary>
            Delegate for arbitarily manipulating a list of purchasables
            </summary>
        </member>
        <member name="M:SRML.SR.PurchasableUIRegistry.RegisterPurchasable(SRML.SR.PurchasableUIRegistry.PurchasableUIPredicate,SRML.SR.PurchasableUIRegistry.PurchasableCreatorDelegate)">
            <summary>
            Register a <paramref name="creator"/> to all UI's pointed to by the <paramref name="pred"/>
            </summary>
            <param name="pred">The prediate for filtering the Purchasable UI</param>
            <param name="creator">The creator of the new purchasable</param>
        </member>
        <member name="M:SRML.SR.PurchasableUIRegistry.RegisterEntrySorter(SRML.SR.PurchasableUIRegistry.PurchasableUIPredicate,System.Collections.Generic.IComparer{PurchaseUI.Purchasable})">
            <summary>
            Register a compararer to sort a list of purchasables
            </summary>
            <param name="pred">Filter for PurchasableUI's</param>
            <param name="comparer">Comparer to use when sorting</param>
        </member>
        <member name="M:SRML.SR.PurchasableUIRegistry.RegisterEntrySorter``1(System.Collections.Generic.IComparer{PurchaseUI.Purchasable})">
            <summary>
            Register a compararer to sort a list of purchasables
            </summary>
            <typeparam name="T">The type of the UI</typeparam>
            <param name="comparer">Comparer used for sorting</param>
        </member>
        <member name="M:SRML.SR.PlortRegistry.AddPlortEntry(MarketUI.PlortEntry)">
            <summary>
            Registers a plort entry into the Plort Market.
            </summary>
            <param name="entry">The plort's market entry.</param>
        </member>
        <member name="M:SRML.SR.PlortRegistry.AddPlortEntry(Identifiable.Id,ProgressDirector.ProgressType[])">
            <summary>
            Creates and registers a plort entry into the Plort Market.
            </summary>
            <param name="plortid">The <see cref="T:Identifiable.Id"/> belonging to the plort.</param>
            <param name="progressRequired">The progress required to show the plort as unlocked.</param>
        </member>
        <member name="M:SRML.SR.PlortRegistry.AddPlortEntry(Identifiable.Id)">
            <summary>
            Creates and registers a plort entry into the Plort Market that is automatically unlocked.
            </summary>
            <param name="plortId">The <see cref="T:Identifiable.Id"/> belonging to the plort.</param>
        </member>
        <member name="M:SRML.SR.PlortRegistry.AddEconomyEntry(EconomyDirector.ValueMap)">
            <summary>
            Registers an economy entry into the Plort Market.
            </summary>
            <param name="map">The entry to register.</param>
        </member>
        <member name="M:SRML.SR.PlortRegistry.AddEconomyEntry(Identifiable,System.Single,System.Single)">
            <summary>
            Creates and registers an economy entry into the Plort Market.
            </summary>
            <param name="accept">The <see cref="T:Identifiable"/> belonging to the plort.</param>
            <param name="value">The base value of the plort.</param>
            <param name="fullSaturation">How many plorts needed to saturate the market (cut the price in half).</param>
        </member>
        <member name="M:SRML.SR.PlortRegistry.AddEconomyEntry(Identifiable.Id,System.Single,System.Single)">
            <summary>
            Creates and registers an economy entry into the Plort Market.
            </summary>
            <param name="plortId">The <see cref="T:Identifiable.Id"/> belonging to the plort.</param>
            <param name="value">The base value of the plort.</param>
            <param name="fullSaturation">How many plorts needed to saturate the market (cut the price in half).</param>
            <exception cref="T:System.Exception">Throws if ran in PreLoad.</exception>
        </member>
        <member name="M:SRML.SR.PlortRegistry.RegisterPlort(Identifiable.Id,System.Single,System.Single)">
            <summary>
            Creates and registers a plort entry, as well as an economy entry into the Plort Market.
            </summary>
            <param name="id">The <see cref="T:Identifiable.Id"/> belonging to the plort.</param>
            <param name="value">The base value of the plort.</param>
            <param name="fullSaturation">How many plorts needed to saturate the market (cut the price in half).</param>
        </member>
        <member name="M:SRML.SR.LookupRegistry.RegisterIdentifiablePrefab(UnityEngine.GameObject)">
            <summary>
            Register an Identifiable Prefab into the <see cref="T:LookupDirector"/>
            </summary>
            <param name="b">The prefab to register.</param>
        </member>
        <member name="M:SRML.SR.LookupRegistry.RegisterIdentifiablePrefab(Identifiable)">
            <summary>
            Register an Identifiable Prefab into the <see cref="T:LookupDirector"/>
            </summary>
            <param name="b">The <see cref="T:Identifiable"/> belonging to the prefab to register.</param>
        </member>
        <member name="M:SRML.SR.LookupRegistry.RegisterVacEntry(VacItemDefinition)">
            <summary>
            Register <paramref name="entry"/> into the <see cref="T:LookupDirector"/>
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:SRML.SR.LookupRegistry.RegisterLandPlot(UnityEngine.GameObject)">
            <summary>
            Register a landplot prefab into the <see cref="T:LookupDirector"/>
            </summary>
            <param name="prefab">The prefab to register</param>
        </member>
        <member name="M:SRML.SR.LookupRegistry.RegisterGadget(GadgetDefinition)">
            <summary>
            Register a gadget entry to the <see cref="T:LookupDirector"/>
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:SRML.SR.LookupRegistry.RegisterVacEntry(Identifiable.Id,UnityEngine.Color,UnityEngine.Sprite)">
            <summary>
            Register a vacuumable item into the <see cref="!:"/>
            </summary>
            <param name="id">Id of the vacuumable item</param>
            <param name="color">Color of the background of the inventory slot</param>
            <param name="icon">Icon that will be used for the item in inventory</param>
        </member>
        <member name="M:SRML.SR.LookupRegistry.RegisterUpgradeEntry(UpgradeDefinition)">
            <summary>
            Register <paramref name="entry"/> into the <see cref="T:LookupDirector"/>
            </summary>
            <param name="entry">Upgrade Entry to register</param>
        </member>
        <member name="M:SRML.SR.LookupRegistry.RegisterUpgradeEntry(PlayerState.Upgrade,UnityEngine.Sprite,System.Int32)">
            <summary>
            Create and register an upgrade entry
            </summary>
            <param name="upgrade">Upgrade ID</param>
            <param name="icon">Icon that will show up in the upgrade shop</param>
            <param name="cost">The cost of the upgrade</param>
        </member>
        <member name="M:SRML.SR.LookupRegistry.RegisterSpawnResource(UnityEngine.GameObject)">
            <summary>
            Register a <see cref="T:SpawnResource"/> into the <see cref="T:LookupDirector"/>
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:SRML.SR.LookupRegistry.RegisterGordo(UnityEngine.GameObject)">
            <summary>
            Register a gordo prefab into the <see cref="T:LookupDirector"/>
            </summary>
            <param name="gordo"></param>
        </member>
        <member name="M:SRML.SR.LookupRegistry.RegisterLiquid(LiquidDefinition)">
            <summary>
            Register <paramref name="liquid"/> into the <see cref="T:LookupDirector"/>
            </summary>
            <param name="liquid">Liquid to register</param>
        </member>
        <member name="M:SRML.SR.LookupRegistry.RegisterToy(ToyDefinition)">
            <summary>
            Register <paramref name="entry"/> into the <see cref="T:LookupDirector"/>
            </summary>
            <param name="entry">Entry to register</param>
        </member>
        <member name="M:SRML.SR.LookupRegistry.RegisterToy(Identifiable.Id,UnityEngine.Sprite,System.Int32,System.String)">
            <summary>
            Register a toy (note: does not register the identifiable itself, only the toy, do that separately)
            </summary>
            <param name="id"><see cref="T:Identifiable.Id"/> of the toy</param>
            <param name="icon">Icon for the toy in the toy store</param>
            <param name="cost">How much the toy costs in the toy store</param>
            <param name="nameKey"></param>
        </member>
        <member name="M:SRML.SR.SlimeRegistry.RegisterSlimeDefinition(SlimeDefinition)">
            <summary>
            Register a slime definition in the <see cref="T:SlimeDefinitions"/> database
            </summary>
            <param name="definition">Slime definition to register</param>
        </member>
        <member name="M:SRML.SR.SlimeRegistry.RegisterSlimeDefinition(SlimeDefinition,System.Boolean)">
            <summary>
            Register a slime definition in the <see cref="T:SlimeDefinitions"/> database
            </summary>
            <param name="definition">Slime definition to register</param>
            <param name="refreshEatMaps">Whether or not to refresh the EatMaps of the slime and its bases.</param>
        </member>
        <member name="M:SRML.SR.SlimeRegistry.RegisterAppearance(SlimeDefinition,SlimeAppearance)">
            <summary>
            Registers a <see cref="T:SlimeAppearance"/>.
            </summary>
            <param name="def">The <see cref="T:SlimeDefinition"/> that the <see cref="T:SlimeAppearance"/> is assigned to.</param>
            <param name="app">The <see cref="T:SlimeAppearance"/> to be registered.</param>
        </member>
        <member name="M:SRML.SR.SlimeRegistry.CombineAppearances(SlimeAppearance,SlimeAppearance,SlimeAppearance.AppearanceSaveSet,SRML.SR.SlimeRegistry.LargoProps,UnityEngine.Shader)">
            <summary>
            Combines two <see cref="T:SlimeAppearance"/>s into a largo <see cref="T:SlimeAppearance"/>.
            </summary>
            <param name="slime1">The base <see cref="T:SlimeAppearance"/>.</param>
            <param name="slime2">The addon <see cref="T:SlimeAppearance"/>.</param>
            <param name="set">The <see cref="T:SlimeAppearance.AppearanceSaveSet"/> to register the <see cref="T:SlimeAppearance"/> into.</param>
            <param name="props">The properties controlling the way the <see cref="T:SlimeAppearance"/>s are combined.</param>
            <param name="stripeShader">The stripe shader to be used, if any.</param>
            <returns>The created <see cref="T:SlimeAppearance"/>.</returns>
        </member>
        <member name="M:SRML.SR.SlimeRegistry.CombineDefinitions(Identifiable.Id,SlimeDefinition,SlimeDefinition,SRML.SR.SlimeRegistry.LargoProps)">
            <summary>
            Creates a largo <see cref="T:SlimeDefinition"/> from two base <see cref="T:SlimeDefinition"/>s.
            </summary>
            <param name="id">The <see cref="T:Identifiable.Id"/> belonging to the resulting largo.</param>
            <param name="slime1">The <see cref="T:SlimeDefinition"/> belonging to the base slime.</param>
            <param name="slime2">The <see cref="T:SlimeDefinition"/> belonging to the addon slime.</param>
            <param name="props">The properties controlling the way the <see cref="T:SlimeDefinition"/>s are combined.</param>
            <returns>The created <see cref="T:SlimeDefinition"/>.</returns>
        </member>
        <member name="M:SRML.SR.SlimeRegistry.CombineSlimePrefabs(SlimeDefinition)">
            <summary>
            Combines the <see cref="T:UnityEngine.GameObject"/>s of the bases of a <see cref="T:SlimeDefinition"/> into one <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="def">The largo's <see cref="T:SlimeDefinition"/>.</param>
            <returns>The created <see cref="T:UnityEngine.GameObject"/>.</returns>
        </member>
        <member name="M:SRML.SR.SlimeRegistry.CraftLargo(Identifiable.Id,Identifiable.Id,Identifiable.Id,SRML.SR.SlimeRegistry.LargoProps,SRML.SR.SlimeRegistry.LargoProps,SRML.SR.SlimeRegistry.LargoProps,SRML.SR.SlimeRegistry.LargoProps)">
            <summary>
            Combines two slimes into a largo.
            </summary>
            <param name="largoId">The <see cref="T:Identifiable.Id"/> belonging to the resulting largo.</param>
            <param name="slime1">The <see cref="T:Identifiable.Id"/> belonging to the base slime.</param>
            <param name="slime2">The <see cref="T:Identifiable.Id"/> belonging to the addon slime.</param>
            <param name="props">The properties controlling the way the slimes are combined.</param>
            <param name="slime1SSProps">The properties controlling the base Secret Style and the addon normal <see cref="T:SlimeAppearance"/>s are combined.</param>
            <param name="slime2SSProps">The properties controlling the base normal and the addon Secret Style <see cref="T:SlimeAppearance"/>s are combined.</param>
            <param name="slime12SSProps">The properties controlling the base Secret Style and the addon Secret Style <see cref="T:SlimeAppearance"/>s are combined.</param>
        </member>
        <member name="M:SRML.SR.SlimeRegistry.CraftLargo(Identifiable.Id,Identifiable.Id,Identifiable.Id,SRML.SR.SlimeRegistry.LargoProps,SlimeDefinition@,SlimeAppearance@,UnityEngine.GameObject@,SRML.SR.SlimeRegistry.LargoProps,SRML.SR.SlimeRegistry.LargoProps,SRML.SR.SlimeRegistry.LargoProps)">
            <summary>
            Combines two slimes into a largo.
            </summary>
            <param name="largoId">The <see cref="T:Identifiable.Id"/> belonging to the resulting largo.</param>
            <param name="slime1">The <see cref="T:Identifiable.Id"/> belonging to the base slime.</param>
            <param name="slime2">The <see cref="T:Identifiable.Id"/> belonging to the addon slime.</param>
            <param name="props">The properties controlling the way the slimes are combined.</param>
            <param name="slime1SSProps">The properties controlling the base Secret Style and the addon normal <see cref="T:SlimeAppearance"/>s are combined.</param>
            <param name="slime2SSProps">The properties controlling the base normal and the addon Secret Style <see cref="T:SlimeAppearance"/>s are combined.</param>
            <param name="slime12SSProps">The properties controlling the base Secret Style and the addon Secret Style <see cref="T:SlimeAppearance"/>s are combined.</param>
            <param name="largoDefinition">The <see cref="T:SlimeDefinition"/> of the created largo.</param>
            <param name="largoAppearance">The <see cref="T:SlimeAppearance"/> of the created largo.</param>
            <param name="largoObject">The <see cref="T:UnityEngine.GameObject"/> of the created largo.</param>
        </member>
        <member name="M:SRML.SR.SlimeRegistry.GenerateLargoName(Identifiable.Id)">
            <summary>
            Takes an <see cref="T:Identifiable.Id"/> and formats it into a largo name.
            </summary>
            <param name="id">The <see cref="T:Identifiable.Id"/> belonging to the largo.</param>
            <returns>The resulting name.</returns>
        </member>
        <member name="M:SRML.SR.SpawnResourceRegistry.CreateSpawnResourceId(System.Object,System.String)">
            <summary>
            Creates a <see cref="T:SpawnResource.Id"/>.
            </summary>
            <param name="value">What value is assigned to the <see cref="T:SpawnResource.Id"/>.</param>
            <param name="name">The name of the <see cref="T:SpawnResource.Id"/>.</param>
            <returns>The created <see cref="T:SpawnResource.Id"/>.</returns>
            <exception cref="T:System.Exception">Throws if ran outside of PreLoad</exception>
        </member>
        <member name="T:SRML.SR.Templates.GameObjectTemplate">
            <summary>
            Represents a template game object, used to contain templates to turn into
            Runtime Prefabs
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Identifiables.AnimalTemplate">
            <summary>
            A template to create new animals
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.AnimalTemplate.#ctor(System.String,Identifiable.Id,UnityEngine.Mesh,UnityEngine.Material[],SRML.SR.Templates.Create{UnityEngine.Animator},System.Boolean)">
            <summary>
            Template to create new animals
            </summary>
            <param name="name">The name of the object (prefixes are recommended, but not needed)</param>
            <param name="ID">The Identifiable ID for this animal</param>
            <param name="mesh">The model's mesh for this animal</param>
            <param name="materials">The materials that compose this animal's model</param>
            <param name="animator">The animator used by the animal</param>
            <param name="isChild">Is this animal a child?</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.AnimalTemplate.SetReproduceObjects(Identifiable,UnityEngine.GameObject)">
            <summary>
            Sets the reproduction objects (not needed for childs or males)
            </summary>
            <param name="mate">The male mate of this female</param>
            <param name="child">The resulting child</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.AnimalTemplate.SetElder(UnityEngine.GameObject)">
            <summary>
            Sets the elder version of this (not needed for childs)
            </summary>
            <param name="elder">The elder version</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.AnimalTemplate.SetMoveComponent(SRML.SR.Templates.ICreateComponent)">
            <summary>
            Sets the movement component to a new one (Default is the Chicken Movement)
            </summary>
            <param name="comp">New component to use</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.AnimalTemplate.SetVacSize(Vacuumable.Size)">
            <summary>
            Sets the vacuumable size
            </summary>
            <param name="vacSize">The vac size to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.AnimalTemplate.SetReproduceInfo(System.Single,System.Single)">
            <summary>
            Sets the reproduction infos (not needed for childs or males)
            </summary>
            <param name="minReproduceGameHours">Min. Reproduction hours</param>
            <param name="maxReproduceGameHours">Max. Reproduction hours</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.AnimalTemplate.SetBones(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Sets the bones and skinned mesh of this animal (default are the ones from the Chicken/Hen)
            <para>The skinned mesh would be an object like mesh_body1 of the Hen's Prefab</para>
            <para>The bones would be an object like root of the Hen's Prefab</para>
            </summary>
            <param name="skinnedMesh">The new skinned mesh to use for the animal</param>
            <param name="bones">The new bones to use for the animal</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.AnimalTemplate.SetChildInfo(System.Single,System.Single,UnityEngine.GameObject)">
            <summary>
            Sets the child info (only needed for childs)
            </summary>
            <param name="delayGameHours">The number of hours before becoming an adult</param>
            <param name="eggPeriod">The number of hours before hatching the egg</param>
            <param name="egg">The egg object</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.AnimalTemplate.SetTranslation(System.String)">
            <summary>
            Sets the translation for this animal's name
            </summary>
            <param name="name">The translated name</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.AnimalTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Identifiables.CraftResourceTemplate">
            <summary>
            A template to create new Craft Resources
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.CraftResourceTemplate.#ctor(System.String,Identifiable.Id,PediaDirector.Id,UnityEngine.Mesh,UnityEngine.Material[])">
            <summary>
            Template to create new Craft Resources
            </summary>
            <param name="name">The name of the object (prefixes are recommend, but not needed)</param>
            <param name="ID">The Identifiable ID for this resource</param>
            <param name="pediaID">The pedia ID for this resource</param>
            <param name="mesh">The model's mesh for this resource</param>
            <param name="materials">The materials that compose this resource's model</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.CraftResourceTemplate.SetVacSize(Vacuumable.Size)">
            <summary>
            Sets the vacuumable size
            </summary>
            <param name="vacSize">The vac size to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.CraftResourceTemplate.SetModelTrans(SRML.SR.Utils.BaseObjects.ObjectTransformValues)">
            <summary>
            Sets the transform values for the model
            </summary>
            <param name="trans">New values to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.CraftResourceTemplate.SetColliderRadius(System.Single)">
            <summary>
            Sets the collider radius for this craft resource (Use this to ajust the collider to the model)
            </summary>
            <param name="colRadius">The radius of the collider</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.CraftResourceTemplate.SetDelaunchScale(UnityEngine.Vector3)">
            <summary>
            Sets the scale for the Delaunch Trigger (do not change if you don't know what you are doing)
            </summary>
            <param name="delaunchScale">The new scale to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.CraftResourceTemplate.SetTranslation(System.String)">
            <summary>
            Sets the translation for this resource's name
            </summary>
            <param name="name">The translated name</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.CraftResourceTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Identifiables.CrateTemplate">
            <summary>
            A template to create new crates
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.CrateTemplate.#ctor(System.String,Identifiable.Id,UnityEngine.Material[])">
            <summary>
            Template to create new crates
            </summary>
            <param name="name">The name of the object (prefixes are recommended, but not needed)</param>
            <param name="ID">The Identifiable ID for this crate</param>
            <param name="materials">The materials that compose this crate's model</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.CrateTemplate.SetVacSize(Vacuumable.Size)">
            <summary>
            Sets the vacuumable size
            </summary>
            <param name="vacSize">The vac size to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.CrateTemplate.SetSpawnOptions(System.Collections.Generic.List{BreakOnImpact.SpawnOption})">
            <summary>
            Sets the spawn options for the crate
            </summary>
            <param name="spawnOptions">List of options</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.CrateTemplate.SetSpawnInfo(System.Int32,System.Int32)">
            <summary>
            Sets the info for spawning items
            </summary>
            <param name="minSpawns">The min amount of things to spawn</param>
            <param name="maxSpawns">The max amount of things to spawn</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.CrateTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Identifiables.FashionAttachTemplate">
            <summary>
            A template to create new fashion attachments (the part that gets attached to the object)
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FashionAttachTemplate.#ctor(System.String,UnityEngine.Mesh,UnityEngine.Material[])">
            <summary>
            Template to create new fashion attachments
            </summary>
            <param name="name">The name of the object (prefixes are recommend, but not needed)</param>
            <param name="ID">The Identifiable ID for this fashion attachment</param>
            <param name="mesh">The model's mesh for this fashion attachment</param>
            <param name="materials">The materials that compose this fashion attachment's model</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FashionAttachTemplate.SetModelTrans(SRML.SR.Utils.BaseObjects.ObjectTransformValues)">
            <summary>
            Sets the transform values for the model
            </summary>
            <param name="trans">New values to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FashionAttachTemplate.AddLayer(UnityEngine.Mesh,UnityEngine.Material[])">
            <summary>
            Adds a new layer
            </summary>
            <param name="mesh">The mesh to add to the layer</param>
            <param name="materials">The materials to add to the layer</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FashionAttachTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Identifiables.FashionTemplate">
            <summary>
            A template to create new fashions (the actual fashion not the pod)
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FashionTemplate.#ctor(System.String,Identifiable.Id,UnityEngine.GameObject,UnityEngine.Sprite,Fashion.Slot)">
            <summary>
            Template to create new fashions
            </summary>
            <param name="name">The name of the object (prefixes are recommended, but not needed)</param>
            <param name="ID">The Identifiable ID for this fashion</param>
            <param name="attachPrefab">The prefab to attach to the target</param>
            <param name="icon">The icon for this fashion</param>
            <param name="slot">The slot it occupied when attached</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FashionTemplate.SetVacSize(Vacuumable.Size)">
            <summary>
            Sets the vacuumable size
            </summary>
            <param name="vacSize">The vac size to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FashionTemplate.SetTranslation(System.String)">
            <summary>
            Sets the translation for this fashion's name
            </summary>
            <param name="name">The translated name</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FashionTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Identifiables.FloatingDecoTemplate">
            <summary>
            A template to create floating decorations like ornaments or echos
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FloatingDecoTemplate.#ctor(System.String,Identifiable.Id,SRML.SR.Templates.Identifiables.FloatingDecoTemplate.Type,UnityEngine.Material[],UnityEngine.Mesh)">
            <summary>
            Template to create floating decorations
            </summary>
            <param name="name">The name of the object (prefixes are recommended, but not needed)</param>
            <param name="ID">The Identifiable ID for this decoration</param>
            <param name="type">The type of decoration</param>
            <param name="mesh">The model's mesh for this decoration</param>
            <param name="materials">The materials that compose this decoration's model</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FloatingDecoTemplate.SetVacSize(Vacuumable.Size)">
            <summary>
            Sets the vacuumable size
            </summary>
            <param name="vacSize">The vac size to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FloatingDecoTemplate.SetClip(System.Int32)">
            <summary>
            Sets the clip (For the type ECHO_NOTE)
            </summary>
            <param name="clip">The number of clip to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FloatingDecoTemplate.SetTransValues(SRML.SR.Utils.BaseObjects.ObjectTransformValues)">
            <summary>
            Sets the transform values
            </summary>
            <param name="trans">New values to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FloatingDecoTemplate.SetColor(UnityEngine.Color)">
            <summary>
            Sets the color for the material (For the type ECHO or ECHO_NOTE) (only if you want to use the default material for echos and change the color)
            </summary>
            <param name="color">New color to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FloatingDecoTemplate.SetTranslation(System.String)">
            <summary>
            Sets the translation for this deco's name
            </summary>
            <param name="name">The translated name</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FloatingDecoTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Identifiables.FoodTemplate">
            <summary>
            A template to create new foods
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FoodTemplate.#ctor(System.String,Identifiable.Id,PediaDirector.Id,SRML.SR.Templates.Identifiables.FoodTemplate.Type,UnityEngine.Mesh,UnityEngine.Material[])">
            <summary>
            Template to create new foods
            </summary>
            <param name="name">The name of the object (prefixes are recommended, but not needed)</param>
            <param name="ID">The Identifiable ID for this food</param>
            <param name="pediaID">The pedia ID for this resource</param>
            <param name="type">The type of food</param>
            <param name="mesh">The model's mesh for this food</param>
            <param name="materials">The materials that compose this food's model</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FoodTemplate.SetVacSize(Vacuumable.Size)">
            <summary>
            Sets the vacuumable size
            </summary>
            <param name="vacSize">The vac size to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FoodTemplate.SetResourceInfo(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the info of the resource cycle
            </summary>
            <param name="unripeGameHours">The number of game hours before the food is ready to collect</param>
            <param name="ripeGameHours">The number of game hours the food stays in place to be riped</param>
            <param name="edibleGameHours">The number of game hours the food can be eaten</param>
            <param name="rottenGameHours">The number of game hours the food takes to rot</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FoodTemplate.SetRottenMaterial(UnityEngine.Material)">
            <summary>
            Sets the rotten material
            </summary>
            <param name="rotten">The rotten material</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FoodTemplate.SetCues(SECTR_AudioCue,SECTR_AudioCue)">
            <summary>
            Sets the Audio Cues for the food (Only needed for type CUSTOM)
            </summary>
            <param name="releaseCue">The cue triggered when the food is released from a farmable zone</param>
            <param name="hitCue">The cue triggered when the food hits something</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FoodTemplate.SetDelaunchScale(UnityEngine.Vector3)">
            <summary>
            Sets the scale for the Delaunch Trigger (do not change if you don't know what you are doing)
            </summary>
            <param name="delaunchScale">The new scale to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FoodTemplate.SetModelScale(UnityEngine.Vector3)">
            <summary>
            Sets the scale for the model, only needed if the default doesn't work
            </summary>
            <param name="modelScale">The new scale to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FoodTemplate.SetEjectWhenMature(System.Boolean)">
            <summary>
            Sets the option to eject the food when mature (only needed if the food is farmable)
            </summary>
            <param name="ejectWhenMature">The new state to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FoodTemplate.SetTranslation(System.String)">
            <summary>
            Sets the translation for this slime's name
            </summary>
            <param name="name">The translated name</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.FoodTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Identifiables.GordoTemplate">
            <summary>
            A template to create new gordos
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.GordoTemplate.#ctor(System.String,Identifiable.Id,SlimeDefinition,UnityEngine.Material[])">
            <summary>
            Template to create new gordos
            </summary>
            <param name="name">The name of the object (prefixes are recommend, but not needed)</param>
            <param name="ID">The identifiable ID for this gordo</param>
            <param name="definition">The definition of the slime this gordo is based on</param>
            <param name="materials">The materials to use on the model of this gordo</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.GordoTemplate.AddBehaviour(SRML.SR.Templates.ICreateComponent)">
            <summary>
            Adds a new behaviour to the slime
            </summary>
            <param name="component">The component containing the new behaviour</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.GordoTemplate.AddBehaviour(SRML.SR.Templates.ICreateComponent,SRML.SR.Templates.ICreateComponent[])">
            <summary>
            Adds a new behaviour to the slime
            </summary>
            <param name="component">The component containing the new behaviour</param>
            <param name="comps">A list of components containing the new behaviour</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.GordoTemplate.SetBoneStructure(UnityEngine.GameObject)">
            <summary>
            Sets a new bone structure for the slime (Starting at the Vibrating part)
            </summary>
            <param name="boneStructure">The new bone structure as a game object (to add to the prefab)</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.GordoTemplate.SetTranslation(System.String)">
            <summary>
            Sets the translation for this gordo's name
            </summary>
            <param name="name">The translated name</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.GordoTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Identifiables.LiquidTemplate">
            <summary>
            A template to create new liquids
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.LiquidTemplate.#ctor(System.String,Identifiable.Id,UnityEngine.Material[])">
            <summary>
            Template to create new liquids
            </summary>
            <param name="name">The name of the object (prefixes are recommended, but not needed)</param>
            <param name="ID">The Identifiable ID for this liquid</param>
            <param name="materials">The materials that compose this liquid's model</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.LiquidTemplate.SetVacSize(Vacuumable.Size)">
            <summary>
            Sets the vacuumable size
            </summary>
            <param name="vacSize">The vac size to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.LiquidTemplate.SetColor(UnityEngine.Color)">
            <summary>
            Sets the color for the material (only if you want to use the default material for water and change the color)
            <para>DO NOT USE THIS IF YOU SET A CUSTOM MATERIAL, THIS WILL OVERRIDE THAT MATERIAL</para>
            </summary>
            <param name="color">New color to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.LiquidTemplate.SetTranslation(System.String)">
            <summary>
            Sets the translation for this slime's name
            </summary>
            <param name="name">The translated name</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.LiquidTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Identifiables.PlortTemplate">
            <summary>
            A template to create new plorts
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.PlortTemplate.#ctor(System.String,Identifiable.Id,UnityEngine.Material[])">
            <summary>
            Template to create new plorts
            </summary>
            <param name="name">The name of the object (prefixes are recommended, but not needed)</param>
            <param name="ID">The Identifiable ID for this plort</param>
            <param name="materials">The materials that compose this plort's model</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.PlortTemplate.SetVacSize(Vacuumable.Size)">
            <summary>
            Sets the vacuumable size
            </summary>
            <param name="vacSize">The vac size to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.PlortTemplate.SetTranslation(System.String)">
            <summary>
            Sets the translation for this plort's name
            </summary>
            <param name="name">The translated name</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.PlortTemplate.SetScale(UnityEngine.Vector3)">
            <summary>
            Sets the scale for the plort
            </summary>
            <param name="scale">The scale to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.PlortTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Identifiables.SlimeTemplate">
            <summary>
            A template to create new slimes
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.#ctor(System.String,SlimeDefinition)">
            <summary>
            Template to create new slimes
            </summary>
            <param name="name">The name of the object (prefixes are recommend, but not needed)</param>
            <param name="definition">The definition for this slime</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.SetVacSize(Vacuumable.Size)">
            <summary>
            Sets the vacuumable size
            </summary>
            <param name="vacSize">The vac size to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.SetEatInfo(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the eat info
            </summary>
            <param name="driveToEat">The min. drive required for the slime to eat</param>
            <param name="drivePerEat">How much the drive is reduced once fed</param>
            <param name="agitPerEat">How much the agitation is reduced once fed</param>
            <param name="agitPerFavEat">How much the agitation is reduced once fed it's favorite</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.SetHealth(System.Int32)">
            <summary>
            Sets the max. health of this slime
            </summary>
            <param name="health">The max. health to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.SetFeralState(System.Boolean)">
            <summary>
            Sets the possibility of having a feral state
            </summary>
            <param name="canBeFeral">Can the slime be afected by a feral state</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.SetGlitchState(System.Boolean)">
            <summary>
            Sets the possibility of turning into a glitch if spawned in the Slimeulation
            </summary>
            <param name="canBeAGlitch">Can the slime be turned into a glitch inside the Slimeulation</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.SetFearProfile(FearProfile)">
            <summary>
            Sets the fear profile
            </summary>
            <param name="profile">The fear profile to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.SetEmotions(SlimeEmotions.EmotionState,SlimeEmotions.EmotionState,SlimeEmotions.EmotionState)">
            <summary>
            Sets the starting emotions of this slime
            </summary>
            <param name="hungerState">The initial state for Hunger</param>
            <param name="agitationState">The initial state for Agitation</param>
            <param name="fearState">The initial state for Fear</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.SetDelaunchScale(UnityEngine.Vector3)">
            <summary>
            Sets the scale for the Delaunch Trigger (do not change if you don't know what you are doing)
            </summary>
            <param name="delaunchScale">The new scale to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.AddBehaviour(SRML.SR.Templates.ICreateComponent)">
            <summary>
            Adds a new behaviour to the slime
            </summary>
            <param name="component">The component containing the new behaviour</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.AddBehaviour(SRML.SR.Templates.ICreateComponent,SRML.SR.Templates.ICreateComponent[])">
            <summary>
            Adds a new behaviour to the slime
            </summary>
            <param name="component">The component containing the new behaviour</param>
            <param name="comps">A list of components containing the new behaviour</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.SetBoneStructure(UnityEngine.GameObject)">
            <summary>
            Sets a new bone structure for the slime (Starting at the Appearance part)
            </summary>
            <param name="boneStructure">The new bone structure as a game object (to add to the prefab)</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.SetTranslation(System.String)">
            <summary>
            Sets the translation for this slime's name
            </summary>
            <param name="name">The translated name</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.MakeLargos(System.Boolean,System.Action{SlimeDefinition})">
            <summary>
            Generates the largos for this slime (use this if you want the slime to be largoable)
            </summary>
            <param name="canBeTarr">Can the largos from the slime become tarr?</param>
            <param name="extraLargoBehaviour">Use this to add extra behaviours to the largos</param>
            <returns>A list of all IDs made for the largos created</returns>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.MakeRoamingGordo(Identifiable.Id)">
            <summary>
            Generates a roaming Gordo Slime for this slime (use this if you want the slime to have a Gordo counter part)
            <para>Roaming gordos are normal slimes scaled as a gordo and contains almost no behaviours, also it doesnt eat. Use PrefabFunctions to give it
            behaviours</para>
            </summary>
            <param name="gordoID">The ID for the gordo</param>
            <returns>The slime template for the Roaming Gordo (YOU NEED TO CLASS .Create TO FINISH THE PROCESS)</returns>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.MakeStaticGordo(Identifiable.Id,UnityEngine.Material[])">
            <summary>
            Generates a Gordo Slime for this slime (use this if you want the slime to have a Gordo counter part)
            </summary>
            <param name="gordoID">The ID for the gordo</param>
            <returns>The gordo template for the static gordo (YOU NEED TO CLASS .Create TO FINISH THE PROCESS)</returns>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.BuildModule">
            <summary>
            Builds the module for this slime
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.SlimeTemplate.RegisterDefinition">
            <summary>
            Builds the definition for this slime
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Identifiables.ToyTemplate">
            <summary>
            A template to create new toys
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.ToyTemplate.#ctor(System.String,Identifiable.Id,UnityEngine.Mesh,UnityEngine.Material[],SECTR_AudioCue)">
            <summary>
            Template to create new toys
            </summary>
            <param name="name">The name of the object (prefixes are recommended, but not needed)</param>
            <param name="ID">The Identifiable ID for this toy</param>
            <param name="mesh">The model's mesh for this toy</param>
            <param name="materials">The materials that compose this toy's model</param>
            <param name="hitCue">The audio cue when this toy hits something</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.ToyTemplate.SetVacSize(Vacuumable.Size)">
            <summary>
            Sets the vacuumable size
            </summary>
            <param name="vacSize">The vac size to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.ToyTemplate.SetRequiredFashion(Identifiable.Id)">
            <summary>
            Sets what fashion is required to react with this toy
            </summary>
            <param name="ID">The ID of said fashion (NONE to remove the required fashion)</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.ToyTemplate.SetTranslation(System.String)">
            <summary>
            Sets the translation for this toy's name
            </summary>
            <param name="name">The translated name</param>
        </member>
        <member name="M:SRML.SR.Templates.Identifiables.ToyTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Misc.TechActivatorTemplate">
            <summary>
            A template ti create new Tech Activators
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Misc.TechActivatorTemplate.#ctor(System.String,UnityEngine.GameObject)">
            <summary>
            Template to create new Tech Activators
            </summary>
            <param name="name">The name of the object (prefixes are recommended, but not needed)</param>
            <param name="prefabUI">The prefab UI to display</param>
        </member>
        <member name="M:SRML.SR.Templates.Misc.TechActivatorTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.IModPrefab">
            <summary>
            Interface used to make lists of Mod Prefabs (as lists can't have different generic constructs)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.ModPrefab`1">
            <summary>
            Simple prefab like class, used to make the structure for templates
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.ModPrefab`1.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.ModPrefab`1.AddStartAction(System.String)">
            <summary>
            Adds a new start action to the pile
            </summary>
            <param name="actionID">ID of the action (as registered in TemplateActions)</param>
        </member>
        <member name="M:SRML.SR.Templates.ModPrefab`1.AddAwakeAction(System.String)">
            <summary>
            Adds a new awake action to the pile
            </summary>
            <param name="actionID">ID of the action (as registered in TemplateActions)</param>
        </member>
        <member name="M:SRML.SR.Templates.ModPrefab`1.AddPrefabFunction(System.Action{SRML.SR.Templates.GameObjectTemplate})">
            <summary>
            Adds a prefab function (they are executed when ToPrefab is called)
            </summary>
            <param name="action">Action to add to the pile</param>
        </member>
        <member name="M:SRML.SR.Templates.ModPrefab`1.AddPrefabFunction(System.Action{SRML.SR.Templates.GameObjectTemplate}[])">
            <summary>
            Adds a prefab function (they are executed when ToPrefab is called)
            </summary>
            <param name="actions">Actions to add to the pile</param>
        </member>
        <member name="M:SRML.SR.Templates.ModPrefab`1.SetTranslation(System.String)">
            <summary>
            Sets the translation for the prefab, not all templates implement this, so it might do nothing.
            </summary>
            <param name="name">The translated name</param>
        </member>
        <member name="M:SRML.SR.Templates.ModPrefab`1.ToPrefab">
            <summary>
            Turns this ModPrefab/Template into a runtime prefab
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.ModPrefab`1.AsTemplate">
            <summary>
            Returns this prefab as a template
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.ModPrefab`1.AsTemplateClone">
            <summary>
            Returns this prefab as a clone of the template
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Plantables.BushPlantableTemplate">
            <summary>
            A template to create new bush plantables
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.#ctor(System.String,System.Boolean,Identifiable.Id,SpawnResource.Id,System.Collections.Generic.List{UnityEngine.GameObject})">
            <summary>
            Template to create new veggie plantables
            </summary>
            <param name="name">The name of the object (prefixes are recommended, but not needed)</param>
            <param name="isDeluxe">Is this plantable for the deluxe version of the garden?</param>
            <param name="ID">The ID of the identifiable spawned by this plantable</param>
            <param name="resID">The spawn resource id for this plantable</param>
            <param name="toSpawn">The list of things to spawn (null to get it from the ID provided)</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetBonusInfo(System.Int32,System.Single)">
            <summary>
            Sets the bonus info
            </summary>
            <param name="minBonusSelection">The min. amount selected from the bonus list</param>
            <param name="bonusChance">The change to select extras</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetBonusSpawn(System.Collections.Generic.List{UnityEngine.GameObject})">
            <summary>
            Sets the list of bonus spawns
            </summary>
            <param name="bonusToSpawn">The list to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.AddBonusSpawn(Identifiable.Id)">
            <summary>
            Adds a new bonus spawn to the list
            </summary>
            <param name="ID">The ID for the spawnable</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.AddBonusSpawn(UnityEngine.GameObject)">
            <summary>
            Adds a new bonus spawwn to the list
            </summary>
            <param name="obj">The game object of the identifiable to spawn</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetSpawn(System.Collections.Generic.List{UnityEngine.GameObject})">
            <summary>
            Sets the list of spawns
            </summary>
            <param name="toSpawn">The list to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.AddSpawn(Identifiable.Id)">
            <summary>
            Adds a spawn to the list
            </summary>
            <param name="ID">The ID for the spawnable</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.AddSpawn(UnityEngine.GameObject)">
            <summary>
            Adds a spawn to the list
            </summary>
            <param name="obj">The game object of the identifiable to spawn</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetCustomTree(UnityEngine.Mesh,UnityEngine.Material[],UnityEngine.Mesh)">
            <summary>
            Sets the tree to be used
            </summary>
            <param name="tree">The tree's mesh</param>
            <param name="treeMaterials">The materials for that tree</param>
            <param name="treeCol">The tree's mesh for the collider</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetCustomTree(SpawnResource.Id)">
            <summary>
            Sets the tree to be used based on the SpawnResource ID (only works for those already in the game)
            </summary>
            <param name="ID">The ID to get the tree from</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetCustomLeaves(UnityEngine.Mesh,UnityEngine.Material[],UnityEngine.Mesh)">
            <summary>
            Sets the leaves to be used
            </summary>
            <param name="leaves">The leaves's mesh</param>
            <param name="leavesMaterials">The materials for that leaves</param>
            <param name="leavesCol">The leaves's mesh for the collider</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetCustomLeaves(SpawnResource.Id)">
            <summary>
            Sets the leaves to be used based on the SpawnResource ID (only works for those already in the game)
            </summary>
            <param name="ID">The ID to get the leaves from</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetLeavesPosition(UnityEngine.Vector3)">
            <summary>
            Sets the position for the leaves (uses the same for normal and deluxe)
            </summary>
            <param name="position">The new position to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetLeavesPosition(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Sets the position for the leaves (uses different ones for normal and deluxe versions)
            </summary>
            <param name="position">The new position to set for normal</param>
            <param name="deluxePosition">The new position to set for deluxe</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetLeavesScale(UnityEngine.Vector3)">
            <summary>
            Sets the scale for the leaves (uses the same for normal and deluxe)
            </summary>
            <param name="scale">The new scale to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetLeavesScale(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Sets the scale for the leaves (uses different ones for normal and deluxe versions)
            </summary>
            <param name="scale">The new scale to set for normal</param>
            <param name="deluxeScale">The new scale to set for deluxe</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetTreeScale(UnityEngine.Vector3)">
            <summary>
            Sets the scale for the tree (uses the same for normal and deluxe)
            </summary>
            <param name="scale">The new scale to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetTreeScale(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Sets the scale for the tree (uses different ones for normal and deluxe versions)
            </summary>
            <param name="scale">The new scale to set for normal</param>
            <param name="deluxeScale">The new scale to set for deluxe</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetSpawnInfo(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the spawn info
            </summary>
            <param name="minSpawn">Min. number of items to spawn</param>
            <param name="maxSpawn">Max. number of items to spawn</param>
            <param name="minHours">Min. hours to be ready to spawn</param>
            <param name="maxHours">Max. hours to be ready to spawn</param>
            <param name="minNutrient">Min. value of nutrients, related to growth rate</param>
            <param name="waterHours">The number of hours the water lasts in the soil</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetModel(UnityEngine.Mesh,UnityEngine.Material[])">
            <summary>
            Sets the model of the spawn points (used to display the growth of the items)
            </summary>
            <param name="modelMesh">The mesh for the model</param>
            <param name="modelMaterials">The materials for the model</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.SetSpawnJoints(System.Collections.Generic.List{SRML.SR.Utils.BaseObjects.ObjectTransformValues})">
            <summary>
            Sets the spawn joints (the list needs to have 20 for non-deluxe and 34 for deluxe)
            </summary>
            <param name="spawnJoints">New spawn joints to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.BushPlantableTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Plantables.FruitPlantableTemplate">
            <summary>
            A template to create new fruit plantables
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.#ctor(System.String,System.Boolean,Identifiable.Id,SpawnResource.Id,System.Collections.Generic.List{UnityEngine.GameObject})">
            <summary>
            Template to create new veggie plantables
            </summary>
            <param name="name">The name of the object (prefixes are recommended, but not needed)</param>
            <param name="isDeluxe">Is this plantable for the deluxe version of the garden?</param>
            <param name="ID">The ID of the identifiable spawned by this plantable</param>
            <param name="resID">The spawn resource id for this plantable</param>
            <param name="toSpawn">The list of things to spawn (null to get it from the ID provided)</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetBonusInfo(System.Int32,System.Single)">
            <summary>
            Sets the bonus info
            </summary>
            <param name="minBonusSelection">The min. amount selected from the bonus list</param>
            <param name="bonusChance">The change to select extras</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetBonusSpawn(System.Collections.Generic.List{UnityEngine.GameObject})">
            <summary>
            Sets the list of bonus spawns
            </summary>
            <param name="bonusToSpawn">The list to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.AddBonusSpawn(Identifiable.Id)">
            <summary>
            Adds a new bonus spawn to the list
            </summary>
            <param name="ID">The ID for the spawnable</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.AddBonusSpawn(UnityEngine.GameObject)">
            <summary>
            Adds a new bonus spawwn to the list
            </summary>
            <param name="obj">The game object of the identifiable to spawn</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetSpawn(System.Collections.Generic.List{UnityEngine.GameObject})">
            <summary>
            Sets the list of spawns
            </summary>
            <param name="toSpawn">The list to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.AddSpawn(Identifiable.Id)">
            <summary>
            Adds a spawn to the list
            </summary>
            <param name="ID">The ID for the spawnable</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.AddSpawn(UnityEngine.GameObject)">
            <summary>
            Adds a spawn to the list
            </summary>
            <param name="obj">The game object of the identifiable to spawn</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetCustomTree(UnityEngine.Mesh,UnityEngine.Material[],UnityEngine.Mesh)">
            <summary>
            Sets the tree to be used
            </summary>
            <param name="tree">The tree's mesh</param>
            <param name="treeMaterials">The materials for that tree</param>
            <param name="treeCol">The tree's mesh for the collider</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetCustomTree(SpawnResource.Id)">
            <summary>
            Sets the tree to be used based on the SpawnResource ID (only works for those already in the game)
            </summary>
            <param name="ID">The ID to get the tree from</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetCustomLeaves(UnityEngine.Mesh,UnityEngine.Material[],UnityEngine.Mesh)">
            <summary>
            Sets the leaves to be used
            </summary>
            <param name="leaves">The leaves's mesh</param>
            <param name="leavesMaterials">The materials for that leaves</param>
            <param name="leavesCol">The leaves's mesh for the collider</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetCustomLeaves(SpawnResource.Id)">
            <summary>
            Sets the leaves to be used based on the SpawnResource ID (only works for those already in the game)
            </summary>
            <param name="ID">The ID to get the leaves from</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetLeavesPosition(UnityEngine.Vector3)">
            <summary>
            Sets the position for the leaves (uses the same for normal and deluxe)
            </summary>
            <param name="position">The new position to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetLeavesPosition(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Sets the position for the leaves (uses different ones for normal and deluxe versions)
            </summary>
            <param name="position">The new position to set for normal</param>
            <param name="deluxePosition">The new position to set for deluxe</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetLeavesScale(UnityEngine.Vector3)">
            <summary>
            Sets the scale for the leaves (uses the same for normal and deluxe)
            </summary>
            <param name="scale">The new scale to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetLeavesScale(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Sets the scale for the leaves (uses different ones for normal and deluxe versions)
            </summary>
            <param name="scale">The new scale to set for normal</param>
            <param name="deluxeScale">The new scale to set for deluxe</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetTreeScale(UnityEngine.Vector3)">
            <summary>
            Sets the scale for the tree (uses the same for normal and deluxe)
            </summary>
            <param name="scale">The new scale to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetTreeScale(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Sets the scale for the tree (uses different ones for normal and deluxe versions)
            </summary>
            <param name="scale">The new scale to set for normal</param>
            <param name="deluxeScale">The new scale to set for deluxe</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetSpawnInfo(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the spawn info
            </summary>
            <param name="minSpawn">Min. number of items to spawn</param>
            <param name="maxSpawn">Max. number of items to spawn</param>
            <param name="minHours">Min. hours to be ready to spawn</param>
            <param name="maxHours">Max. hours to be ready to spawn</param>
            <param name="minNutrient">Min. value of nutrients, related to growth rate</param>
            <param name="waterHours">The number of hours the water lasts in the soil</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetModel(UnityEngine.Mesh,UnityEngine.Material[])">
            <summary>
            Sets the model of the spawn points (used to display the growth of the items)
            </summary>
            <param name="modelMesh">The mesh for the model</param>
            <param name="modelMaterials">The materials for the model</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.SetSpawnJoints(System.Collections.Generic.List{SRML.SR.Utils.BaseObjects.ObjectTransformValues})">
            <summary>
            Sets the spawn joints (the list needs to have 20 for non-deluxe and 34 for deluxe)
            </summary>
            <param name="spawnJoints">New spawn joints to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.FruitPlantableTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Plantables.VeggiePlantableTemplate">
            <summary>
            A template to create new veggie plantables
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.VeggiePlantableTemplate.#ctor(System.String,System.Boolean,Identifiable.Id,SpawnResource.Id,System.Collections.Generic.List{UnityEngine.GameObject})">
            <summary>
            Template to create new veggie plantables
            </summary>
            <param name="name">The name of the object (prefixes are recommended, but not needed)</param>
            <param name="isDeluxe">Is this plantable for the deluxe version of the garden?</param>
            <param name="ID">The ID of the identifiable spawned by this plantable</param>
            <param name="resID">The spawn resource id for this plantable</param>
            <param name="toSpawn">The list of things to spawn (null to get it from the ID provided)</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.VeggiePlantableTemplate.SetBonusInfo(System.Int32,System.Single)">
            <summary>
            Sets the bonus info
            </summary>
            <param name="minBonusSelection">The min. amount selected from the bonus list</param>
            <param name="bonusChance">The change to select extras</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.VeggiePlantableTemplate.SetBonusSpawn(System.Collections.Generic.List{UnityEngine.GameObject})">
            <summary>
            Sets the list of bonus spawns
            </summary>
            <param name="bonusToSpawn">The list to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.VeggiePlantableTemplate.AddBonusSpawn(Identifiable.Id)">
            <summary>
            Adds a new bonus spawn to the list
            </summary>
            <param name="ID">The ID for the spawnable</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.VeggiePlantableTemplate.AddBonusSpawn(UnityEngine.GameObject)">
            <summary>
            Adds a new bonus spawwn to the list
            </summary>
            <param name="obj">The game object of the identifiable to spawn</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.VeggiePlantableTemplate.SetSpawn(System.Collections.Generic.List{UnityEngine.GameObject})">
            <summary>
            Sets the list of spawns
            </summary>
            <param name="toSpawn">The list to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.VeggiePlantableTemplate.AddSpawn(Identifiable.Id)">
            <summary>
            Adds a spawn to the list
            </summary>
            <param name="ID">The ID for the spawnable</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.VeggiePlantableTemplate.AddSpawn(UnityEngine.GameObject)">
            <summary>
            Adds a spawn to the list
            </summary>
            <param name="obj">The game object of the identifiable to spawn</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.VeggiePlantableTemplate.SetCustomSprout(UnityEngine.Mesh,UnityEngine.Material[])">
            <summary>
            Sets the sprout to be used (null can also be provided to use the default one)
            </summary>
            <param name="sprout">The sprout's mesh</param>
            <param name="sproutMaterials">The material for that sprout</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.VeggiePlantableTemplate.SetCustomSprout(SpawnResource.Id)">
            <summary>
            Sets the sprout to be used based on the SpawnResource ID (only works for those already in the game)
            </summary>
            <param name="ID">The ID to get the sprout from</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.VeggiePlantableTemplate.SetSpawnInfo(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the spawn info
            </summary>
            <param name="minSpawn">Min. number of items to spawn</param>
            <param name="maxSpawn">Max. number of items to spawn</param>
            <param name="minHours">Min. hours to be ready to spawn</param>
            <param name="maxHours">Max. hours to be ready to spawn</param>
            <param name="minNutrient">Min. value of nutrients, related to growth rate</param>
            <param name="waterHours">The number of hours the water lasts in the soil</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.VeggiePlantableTemplate.SetModel(UnityEngine.Mesh,UnityEngine.Material[])">
            <summary>
            Sets the model of the spawn points (used to display the growth of the items)
            </summary>
            <param name="modelMesh">The mesh for the model</param>
            <param name="modelMaterials">The materials for the model</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.VeggiePlantableTemplate.SetSpawnJoints(System.Collections.Generic.List{SRML.SR.Utils.BaseObjects.ObjectTransformValues})">
            <summary>
            Sets the spawn joints (the list needs to have 20 for non-deluxe and 34 for deluxe)
            </summary>
            <param name="spawnJoints">New spawn joints to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plantables.VeggiePlantableTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Plots.CustomPlotTemplate">
            <summary>
            A template to create new plots
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Plots.CustomPlotTemplate.#ctor(System.String,LandPlot.Id)">
            <summary>
            Template to create new plots
            </summary>
            <param name="name">The name of the object (prefixes are recommended, but not needed)</param>
            <param name="ID">The Plot ID for this plot</param>
        </member>
        <member name="M:SRML.SR.Templates.Plots.CustomPlotTemplate.SetActivatorTransform(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Sets the Activator Transform values
            </summary>
            <param name="position">The position to set</param>
            <param name="rotation">The rotation to set</param>
            <param name="scale">The scale to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plots.CustomPlotTemplate.SetActivatorTransform(SRML.SR.Utils.BaseObjects.ObjectTransformValues)">
            <summary>
            Sets the Activator Transform values
            </summary>
            <param name="trans">The values to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plots.CustomPlotTemplate.SetPlotUI(UnityEngine.GameObject)">
            <summary>
            Sets the game object for the UI of this plot
            </summary>
            <param name="plotUI">The game object to set</param>
        </member>
        <member name="M:SRML.SR.Templates.Plots.CustomPlotTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Plots.PlotFrameTemplate">
            <summary>
            A template to create a plot frame (use this if you want to create a custom frame by adding prefab functions to it)
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Plots.PlotFrameTemplate.#ctor(System.String)">
            <summary>
            Template to create a plot frame
            </summary>
            <param name="name">The name of the object</param>
        </member>
        <member name="M:SRML.SR.Templates.Plots.PlotFrameTemplate.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Plots.IPlotUpgradeTemplate">
            <summary>
            Interface used to make lists of PlotUpgradeTemplate (as lists can't have different generic constructs)
            </summary>
        </member>
        <member name="T:SRML.SR.Templates.Plots.PlotUpgradeTemplate`1">
            <summary>
            A template to create a plot upgrade
            <para>This template is a bit more complex than the others, it's structure is entirely built by you. It only exists for covinience when adding to custom plots.</para>
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Plots.PlotUpgradeTemplate`1.#ctor(System.String,LandPlot.Upgrade,SRML.SR.Templates.Create{`0},System.Action{UnityEngine.GameObject})">
            <summary>
            Template to create a plot upgrade
            </summary>
            <param name="name">The name of the object</param>
            <param name="upgrade">The upgrade for this land plot</param>
            <param name="upgrader">The upgrader component to add to the main object</param>
            <param name="setupComponent">The action to setup the component after creation</param>
        </member>
        <member name="M:SRML.SR.Templates.Plots.PlotUpgradeTemplate`1.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.Plots.PlotUpgradeTemplate`1.Create(System.Action{SRML.SR.Templates.GameObjectTemplate})">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
            <param name="action">The action to construct the template</param>
        </member>
        <member name="T:SRML.SR.Templates.UIs.ActivatorUITemplate`1">
            <summary>
            A template to create new activator UIs
            </summary>
        </member>
        <member name="M:SRML.SR.Templates.UIs.ActivatorUITemplate`1.#ctor(System.String,SRML.SR.Templates.Create{`0})">
            <summary>
            Template to create new activator UIs
            </summary>
            <param name="name">The name of the object (prefixes are recommended, but not needed)</param>
            <param name="baseUI">The UI component to add</param>
        </member>
        <member name="M:SRML.SR.Templates.UIs.ActivatorUITemplate`1.Create">
            <summary>
            Creates the object of the template (To get the prefab version use .ToPrefab() after calling this)
            </summary>
        </member>
        <member name="M:SRML.SR.ToyRegistry.RegisterBasePurchasableToy(Identifiable.Id)">
            <summary>
            Registers a toy into the first group of toys.
            </summary>
            <param name="id">The <see cref="T:Identifiable.Id"/> belonging to the toy.</param>
        </member>
        <member name="M:SRML.SR.ToyRegistry.RegisterUpgradedPurchasableToy(Identifiable.Id)">
            <summary>
            Registers a toy into the second group of toys.
            </summary>
            <param name="id">The <see cref="T:Identifiable.Id"/> belonging to the toy.</param>
        </member>
        <member name="T:SRML.SR.TranslationPatcher">
            <summary>
            Localization
            </summary>
        </member>
        <member name="M:SRML.SR.TranslationPatcher.AddTranslationKey(System.String,System.String,System.String)">
            <summary>
            Add a plaintext translation for a localization key
            </summary>
            <param name="bundlename">Key bundle the localization key is located in</param>
            <param name="key">The localization key</param>
            <param name="value">The plain text translation</param>
        </member>
        <member name="M:SRML.SR.TranslationPatcher.AddPediaTranslation(System.String,System.String)">
            <summary>
            Add a plaintext translation for a localization key in the 'pedia' bundle
            </summary>
            <param name="key">The localization key</param>
            <param name="value">The plain text translation</param>
        </member>
        <member name="M:SRML.SR.TranslationPatcher.AddActorTranslation(System.String,System.String)">
            <summary>
            Add a plaintext translation for a localization key in the 'actor' bundle
            </summary>
            <param name="key">The localization key</param>
            <param name="value">The plain text translation</param>
        </member>
        <member name="M:SRML.SR.TranslationPatcher.AddUITranslation(System.String,System.String)">
            <summary>
            Add a plaintext translation for a localization key in the 'ui' bundle
            </summary>
            <param name="key">The localization key</param>
            <param name="value">The plain text translation</param>
        </member>
        <member name="M:SRML.SR.TranslationPatcher.AddAchievementTranslation(System.String,System.String)">
            <summary>
            Add a plaintext translation for a localization key in the 'achieve' bundle
            </summary>
            <param name="key">The localization key</param>
            <param name="value">The plain text translation</param>
        </member>
        <member name="M:SRML.SR.TranslationPatcher.AddExchangeTranslation(System.String,System.String)">
            <summary>
            Add a plaintext translation for a localization key in the 'exchange' bundle
            </summary>
            <param name="key">The localization key</param>
            <param name="value">The plain text translation</param>
        </member>
        <member name="M:SRML.SR.TranslationPatcher.AddGlobalTranslation(System.String,System.String)">
            <summary>
            Add a plaintext translation for a localization key in the 'global' bundle
            </summary>
            <param name="key">The localization key</param>
            <param name="value">The plain text translation</param>
        </member>
        <member name="M:SRML.SR.TranslationPatcher.AddMailTranslation(System.String,System.String)">
            <summary>
            Add a plaintext translation for a localization key in the 'mail' bundle
            </summary>
            <param name="key">The localization key</param>
            <param name="value">The plain text translation</param>
        </member>
        <member name="M:SRML.SR.TranslationPatcher.AddTutorialTranslation(System.String,System.String)">
            <summary>
            Add a plaintext translation for a localization key in the 'tutorial' bundle
            </summary>
            <param name="key">The localization key</param>
            <param name="value">The plain text translation</param>
        </member>
        <member name="M:SRML.SR.TranslationPatcher.AddSRMLErrorUITranslation(MessageDirector.Lang,System.String,System.String)">
            <summary>
            Add a plaintext translation for localization for SRML error messages
            </summary>
            <param name="language">The language to be translated to</param>
            <param name="errorText">The plain text translation for the text saying it's an error</param>
            <param name="abortText">The plain text translation for the text saying mod-loading is aborting</param>
        </member>
        <member name="M:SRML.SR.PersonalUpgradeRegistry.CreatePersonalUpgrade(System.Object,System.String)">
            <summary>
            Creates a <see cref="T:PlayerState.Upgrade"/>.
            </summary>
            <param name="value">What value is assigned to the <see cref="T:PlayerState.Upgrade"/>.</param>
            <param name="name">The name of the <see cref="T:PlayerState.Upgrade"/>.</param>
            <returns>The created <see cref="T:PlayerState.Upgrade"/>.</returns>
            <exception cref="T:System.Exception">Throws if ran outside of PreLoad</exception>
        </member>
        <member name="M:SRML.SR.PersonalUpgradeRegistry.IsModdedUpgrade(PlayerState.Upgrade)">
            <summary>
            Check if a <see cref="T:PlayerState.Upgrade"/> belongs to a modded upgrade.
            </summary>
            <param name="id">The <see cref="T:PlayerState.Upgrade"/> to check.</param>
            <returns>True if <see cref="T:PlayerState.Upgrade"/> belongs to a modded upgrade, otherwise false.</returns>
        </member>
        <member name="M:SRML.SR.PersonalUpgradeRegistry.RegisterUpgradeCallback(PlayerState.Upgrade,SRML.SR.PersonalUpgradeRegistry.ApplyUpgradeDelegate)">
            <summary>
            Registers a callback to be called when an upgrade is bought.
            </summary>
            <param name="upgrade">The <see cref="T:PlayerState.Upgrade"/> that calls the callback.</param>
            <param name="callback">The callback to be called.</param>
        </member>
        <member name="M:SRML.SR.PersonalUpgradeRegistry.RegisterUpgradeLock(PlayerState.Upgrade,SRML.SR.PersonalUpgradeRegistry.CreateUpgradeLockerDelegate)">
            <summary>
            Registers an upgrade locker.
            </summary>
            <param name="upgrade">The <see cref="T:PlayerState.Upgrade"/> to be locked.</param>
            <param name="del">The locker locking the <see cref="T:PlayerState.Upgrade"/>.</param>
        </member>
        <member name="M:SRML.SR.PersonalUpgradeRegistry.RegisterDefaultUpgrade(PlayerState.Upgrade)">
            <summary>
            Registers an upgrade that's automatically unlocked.
            </summary>
            <param name="upgrade">The <see cref="T:PlayerState.Upgrade"/> to be unlocked.</param>
        </member>
        <member name="T:SRML.Utils.EnumUtils">
            <summary>
            An utility class to help with Enums
            </summary>
        </member>
        <member name="M:SRML.Utils.EnumUtils.Parse(System.Type,System.String)">
            <summary>
            Parses an enum in a easier way
            </summary>
            <param name="enumType">Type of the enum</param>
            <param name="value">Value to parse</param>
            <returns>The parsed enum on success, null on failure.</returns>
        </member>
        <member name="M:SRML.Utils.EnumUtils.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Parses an enum in a easier way
            </summary>
            <param name="enumType">Type of the enum</param>
            <param name="value">Value to parse</param>
            <param name="ignoreCase">true to ignore case; false to regard case.</param>
            <returns>The parsed enum on success, null on failure.</returns>
        </member>
        <member name="M:SRML.Utils.EnumUtils.FromInt(System.Type,System.Int32)">
            <summary>
            Converts int to enum
            </summary>
            <param name="enumType">Type of the enum</param>
            <param name="value">Int to convert to enum</param>
            <returns>The enum equal to the int</returns>
        </member>
        <member name="M:SRML.Utils.EnumUtils.GetAllNames(System.Type)">
            <summary>
            Gets all names in an enum
            </summary>
            <param name="enumType">Type of the enum</param>
            <returns>The list of names in the enum</returns>
        </member>
        <member name="M:SRML.Utils.EnumUtils.GetAll(System.Type)">
            <summary>
            Gets all enum values in an enum
            </summary>
            <param name="enumType">Type of the enum</param>
            <returns>The list of all values in the enum</returns>
        </member>
        <member name="M:SRML.Utils.EnumUtils.IsDefined(System.Type,System.String)">
            <summary>
            Checks if an enum is defined.
            </summary>
            <param name="enumType">Type of the enum</param>
            <param name="value">Value to check</param>
            <returns>true if defined, false if not.</returns>
        </member>
        <member name="M:SRML.Utils.EnumUtils.HasEnumValue(System.Type,System.String)">
            <summary>
            Checks all names in an enum to see if what you need exists.
            </summary>
            <param name="enumType">Type of the enum</param>
            <param name="value">Value to find</param>
            <returns>true if found, false if not.</returns>
        </member>
        <member name="M:SRML.Utils.EnumUtils.Parse``1(System.String,``0)">
            <summary>
            Parses an enum in a easier way
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <param name="value">Value to parse</param>
            <param name="errorReturn">What to return if the parse fails.</param>
            <returns>The parsed enum on success, <paramref name="errorReturn"/> on failure.</returns>
        </member>
        <member name="M:SRML.Utils.EnumUtils.Parse``1(System.String,System.Boolean,``0)">
            <summary>
            Parses an enum in a easier way
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <param name="value">Value to parse</param>
            <param name="ignoreCase">true to ignore case; false to regard case.</param>
            <param name="errorReturn">What to return if the parse fails.</param>
            <returns>The parsed enum on success, <paramref name="errorReturn"/> on failure.</returns>
        </member>
        <member name="M:SRML.Utils.EnumUtils.FromInt``1(System.Int32)">
            <summary>
            Converts int to enum
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <param name="value">Int to convert to enum</param>
            <returns>The enum equal to the int</returns>
        </member>
        <member name="M:SRML.Utils.EnumUtils.GetAllNames``1">
            <summary>
            Gets all names in an enum
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <returns>The list of names in the enum</returns>
        </member>
        <member name="M:SRML.Utils.EnumUtils.GetAll``1(``0)">
            <summary>
            Gets all enum values in an enum
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <param name="errorReturn">What to return if the parse fails.</param>
            <returns>The list of all values in the enum</returns>
        </member>
        <member name="M:SRML.Utils.EnumUtils.IsDefined``1(System.String)">
            <summary>
            Checks if an enum is defined.
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <param name="value">Value to check</param>
            <returns>true if defined, false if not.</returns>
        </member>
        <member name="M:SRML.Utils.EnumUtils.HasEnumValue``1(System.String)">
            <summary>
            Checks all names in an enum to see if what you need exists.
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <param name="value">Value to find</param>
            <returns>true if found, false if not.</returns>
        </member>
        <member name="T:SRML.SRModInfo">
            <summary>
            A basic mod data class that is safe to share between mods (no logic in it)
            </summary>
        </member>
        <member name="T:SRML.SRModInfo.ModVersion">
            <summary>
            Data structure to simplify versioning and the comparing of versions
            </summary>
        </member>
        <member name="T:SRML.SRMod">
            <summary>
            Actual internal implementation of a mod
            </summary>
        </member>
        <member name="P:SRML.SRMod.ModInfo">
            <summary>
            Mods associated SRModInfo object
            </summary>
        </member>
        <member name="P:SRML.SRMod.Path">
            <summary>
            Path of the mod (usually the directory where the core modinfo.json is located)
            </summary>
        </member>
        <member name="M:SRML.SRMod.GetCurrentMod">
            <summary>
            Gets the current executing mod as an SRMod instance 
            </summary>
            <returns>The current executing mod</returns>
        </member>
        <member name="M:SRML.SRMod.ForceModContext(SRML.SRMod)">
            <summary>
            Forces a certain mod to be returned from <see cref="M:SRML.SRMod.GetCurrentMod"/> 
            </summary>
            <param name="mod">The mod to be forced</param>
        </member>
        <member name="M:SRML.SRMod.ClearModContext">
            <summary>
            Clears the current mod context
            </summary>
        </member>
        <member name="M:SRML.SRModLoader.InitializeMods">
            <summary>
            Searches for valid mods and their assemblies, and decides the load order based on their settings
            </summary>
        </member>
        <member name="M:SRML.SRModLoader.IsModPresent(System.String)">
            <summary>
            Check if <paramref name="modid"/> corresponds with a valid mod
            </summary>
            <param name="modid">Mod ID to check</param>
            <returns>Whether or not the mod exists</returns>
        </member>
        <member name="M:SRML.SRModLoader.GetModInfo(System.String)">
            <summary>
            Gets the associated <see cref="T:SRML.SRModInfo"/> for the associated <paramref name="modid"/>
            </summary>
            <param name="modid">Relevant Mod ID</param>
            <returns>The associated ModInfo</returns>
        </member>
        <member name="M:SRML.SRModLoader.GetMod(System.String)">
            <summary>
            Get an <see cref="T:SRML.SRMod"/> instance from a Mod ID
            </summary>
            <param name="id">The ModID</param>
            <returns>The corresponding <see cref="T:SRML.SRMod"/> instance, or null</returns>
        </member>
        <member name="T:SRML.SRModLoader.AssemblyInfo">
            <summary>
            Utility class to help with the discovery and loading of mod assemblies
            </summary>
        </member>
        <member name="T:SRML.SRModLoader.ProtoMod">
            <summary>
            Class that represents a mod before it has been loaded or fully processed
            </summary>
        </member>
        <member name="M:SRML.SRModLoader.ProtoMod.ParseFromJson(System.String)">
            <summary>
            Create a protomod from json info
            </summary>
            <param name="jsonFile">Path of the json file</param>
            <returns>The parsed <see cref="T:SRML.SRModLoader.ProtoMod"/></returns>
        </member>
        <member name="M:SRML.SRModLoader.ProtoMod.TryParseFromDLL(System.String,SRML.SRModLoader.ProtoMod@)">
            <summary>
            Try to create a protomod from an embedded modinfo json in a DLL
            </summary>
            <param name="dllFile">Path to the DLL file to process</param>
            <param name="mod">The parsed <see cref="T:SRML.SRModLoader.ProtoMod"/>, or null</param>
            <returns>Whether the parsing was successful</returns>
        </member>
        <member name="M:SRML.SRModLoader.ProtoMod.ValidateFields">
            <summary>
            Make sure fields are in the correct form and not null
            </summary>
        </member>
        <member name="M:SRML.SRModLoader.ProtoMod.ToModInfo">
            <summary>
            Turn the protomod into a proper <see cref="T:SRML.SRModInfo"/> instance
            </summary>
            <returns>Converted <see cref="T:SRML.SRModInfo"/></returns>
        </member>
        <member name="M:CollectionExtensions.Reverse``1(System.Collections.Generic.List{``0})">
            <summary>
            Reverses the order of the elements in the entire <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:CollectionExtensions.Reverse``1(``0[])">
            <summary>
            Reverses a array
            </summary>
        </member>
        <member name="M:CollectionExtensions.Swap``1(``0[],System.Int32,System.Int32)">
            <summary>
            Swap two elements in array
            </summary>
        </member>
        <member name="M:CollectionExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> that contains elements from the input sequence except <paramref name="remove"/></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CollectionExtensions.TryGetValue``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0@)">
            <summary>
            Attempts to get a value from a collection.
            </summary>
            <returns>True if an element in the collection matches the specified condition, otherwise false.</returns>
        </member>
        <member name="M:CollectionExtensions.RemoveAt``1(``0[],System.Int32)">
            <summary>
            Returns new array without element at index
            </summary>
        </member>
        <member name="M:CollectionExtensions.InsertAt``1(``0[],System.Int32)">
            <summary>
            Returns new array with inserted empty element at index
            </summary>
        </member>
        <member name="M:CollectionExtensions.GetRandom``1(``0[])">
            <summary>
            Returns random element from collection
            </summary>
        </member>
        <member name="M:CollectionExtensions.GetRandom``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns random element from collection
            </summary>
        </member>
        <member name="M:CollectionExtensions.GetRandom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns random element from collection
            </summary>
        </member>
        <member name="M:CollectionExtensions.IsNullOrEmpty``1(``0[])">
            <summary>
            Is array null or empty
            </summary>
        </member>
        <member name="M:CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Is collection null or empty
            </summary>
        </member>
        <member name="M:CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Is enumerable null or empty. IEnumerable is relatively slow. Use Array or Collection implementation if possible
            </summary>
        </member>
        <member name="M:CollectionExtensions.NextIndexInCircle``1(``0[],System.Int32)">
             <summary>
             Get next index for circular array. i.e. -1 will result with last element index, Length + 1 is 0
            
             Example (infinite loop first->last->first):
             i = myArray.NextIndex(i++);
             var nextItem = myArray[i];
             </summary>
        </member>
        <member name="M:CollectionExtensions.IndexOfItem``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <returns>
            Returns -1 if none found
            </returns>
        </member>
        <member name="M:CollectionExtensions.ContentsMatch``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Is Elements in two collections are the same
            </summary>
        </member>
        <member name="M:CollectionExtensions.ContentsMatchKeys``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Is Keys in MyDictionary is the same as some collection
            </summary>
        </member>
        <member name="M:CollectionExtensions.ContentsMatchValues``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Is Values in MyDictionary is the same as some collection
            </summary>
        </member>
        <member name="M:CollectionExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value associated with the specified key if it exists, or
            return the default value for the value type if it doesn't.
            </summary>
        </member>
        <member name="M:CollectionExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets the value associated with the specified key if it exists, or
            generate a value for the new key if it doesn't.
            </summary>
        </member>
        <member name="M:CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action on each element of a collection.
            </summary>
        </member>
        <member name="M:CollectionExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Performs a function on each element of a collection.
            </summary>
        </member>
        <member name="M:CollectionExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Find the element of a collection that has the highest selected value.
            </summary>
        </member>
        <member name="M:CollectionExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Find the element of a collection that has the lowest selected value.
            </summary>
        </member>
        <member name="M:ColorExtensions.WithAlphaSetTo(UnityEngine.Color,System.Single)">
            <summary>
            Returns new Color with Alpha set to a
            </summary>
        </member>
        <member name="M:ColorExtensions.SetAlpha(UnityEngine.SpriteRenderer,System.Single)">
            <summary>
            Set Alpha of Renderer.Color
            </summary>
        </member>
        <member name="M:ColorExtensions.ToHex(UnityEngine.Color)">
            <summary>
            To string of "#b5ff4f" format
            </summary>
        </member>
        <member name="M:ColorExtensions.Lighter(UnityEngine.Color)">
            <summary>
            Returns a color lighter than the given color.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:ColorExtensions.Darker(UnityEngine.Color)">
            <summary>
            Returns a color darker than the given color.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:ColorExtensions.BrightnessOffset(UnityEngine.Color,System.Single)">
            <summary>
            Brightness offset with 1 is brightest and -1 is darkest
            </summary>
        </member>
        <member name="M:MathExtensions.UnixTimestampToDateTime(System.Double)">
            <summary>
            Converts unix timestamp to <see cref="T:System.DateTime"/> with high precision.
            </summary>
            <param name="unixTime">Unix timestamp.</param>
            <returns>DateTime object that represents the same moment in time as provided Unix time.</returns>
        </member>
        <member name="M:MathExtensions.DateTimeToUnixTimestamp(System.DateTime)">
            <summary>
            Converts <see cref="T:System.DateTime"/> to unix timestamp with high precision
            </summary>
            <param name="dateTime">DateTime date representation.</param>
            <returns>unix timestamp that represents the same moment in time as provided DateTime object.</returns>
        </member>
        <member name="M:MathExtensions.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Stop value from going above max or below min values.
            </summary>
        </member>
        <member name="M:MathExtensions.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Stop value from going above max or below min values.
            </summary>
        </member>
        <member name="M:MathExtensions.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Stop value from going above max or below min values.
            </summary>
        </member>
        <member name="M:MathExtensions.Swap``1(``0@,``0@)">
            <summary>
            Swap two reference values
            </summary>
        </member>
        <member name="M:MathExtensions.Snap(System.Double,System.Double)">
            <summary>
            Snap to grid of "round" size
            </summary>
        </member>
        <member name="M:MathExtensions.Snap(System.Single,System.Single)">
            <summary>
            Snap to grid of "round" size
            </summary>
        </member>
        <member name="M:MathExtensions.Sign(System.IComparable)">
            <summary>
            Returns the sign 1/-1 evaluated at the given value.
            </summary>
        </member>
        <member name="M:MathExtensions.InRange01(System.Single)">
            <summary>
            Value is in [0, 1) range.
            </summary>
        </member>
        <member name="M:MathExtensions.InRange``1(``0,``0,``0)">
            <summary>
            Value is in [closedLeft, openRight) range.
            </summary>
        </member>
        <member name="M:MathExtensions.InRangeInclusive``1(``0,``0,``0)">
            <summary>
            Value is in [closedLeft, closedRight] range, max-inclusive.
            </summary>
        </member>
        <member name="M:MathExtensions.NotInRange(System.Single,System.Single,System.Single)">
            <summary>
            Clamp value to less than min or more than max
            </summary>
        </member>
        <member name="M:MathExtensions.NotInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamp value to less than min or more than max
            </summary>
        </member>
        <member name="M:MathExtensions.ClosestPoint(System.Single,System.Single,System.Single)">
            <summary>
            Return point A or B, closest to num
            </summary>
        </member>
        <member name="T:ObjectExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="M:ObjectExtensions.IsNull(System.Object)">
            <summary>
            Performs a TRUE null-check.
            </summary>
            <param name="obj">An object to check.</param>
            <returns>Returns <see langword="true"/> if object is null, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ObjectExtensions.IsNotNull(System.Object)">
            <summary>
            Performs a TRUE not-null-check.
            </summary>
            <param name="obj">An object to check.</param>
            <returns>Returns <see langword="false"/> if object is null, <see langword="true"/> otherwise.</returns>
        </member>
        <member name="M:ObjectExtensions.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a method
            </summary>
            <param name="obj">The object you are invoking the method in</param>
            <param name="name">The name of the method</param>
            <param name="list">parameters</param>
        </member>
        <member name="M:ObjectExtensions.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a method
            </summary>
            <typeparam name="T">Type of return</typeparam>
            <param name="obj">The object you are invoking the method in</param>
            <param name="name">The name of the method</param>
            <param name="list">parameters</param>
        </member>
        <member name="M:ObjectExtensions.SetField(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a field
            </summary>
            <param name="obj">The object to set the field value of</param>
            <param name="name">The name of the field</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:ObjectExtensions.SetField``1(System.Object,System.String,``0)">
            <summary>
            Sets the value of a field
            </summary>
            <param name="obj">The object to set the field value of</param>
            <param name="name">The name of the field</param>
            <param name="value">The value to set</param>
            <typeparam name="T">Type of value</typeparam>
        </member>
        <member name="M:ObjectExtensions.GetField(System.Object,System.String)">
            <summary>
            Gets the value of a field
            </summary>
            <param name="obj">The object to get the value from</param>
            <param name="name">The name of the field</param>
        </member>
        <member name="M:ObjectExtensions.GetField``1(System.Object,System.String)">
            <summary>
            Gets the value of a field
            </summary>
            <param name="obj">The object to get the value from</param>
            <param name="name">The name of the field</param>
            <typeparam name="T">Type of value</typeparam>
        </member>
        <member name="M:ObjectExtensions.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a property
            </summary>
            <param name="obj">The object to set the property value of</param>
            <param name="name">The name of the property</param>
            <param name="value">The value to set</param>
            <typeparam name="T">Type of value</typeparam>
        </member>
        <member name="M:ObjectExtensions.SetProperty``1(System.Object,System.String,``0)">
            <summary>
            Sets the value of a property
            </summary>
            <param name="obj">The object to set the property value of</param>
            <param name="name">The name of the property</param>
            <param name="value">The value to set</param>
            <typeparam name="T">Type of value</typeparam>
        </member>
        <member name="M:ObjectExtensions.GetProperty(System.Object,System.String)">
            <summary>
            Gets the value of a property
            </summary>
            <param name="obj">The object to get the value from</param>
            <param name="name">The name of the property</param>
        </member>
        <member name="M:ObjectExtensions.GetProperty``1(System.Object,System.String)">
            <summary>
            Gets the value of a property
            </summary>
            <param name="obj">The object to get the value from</param>
            <param name="name">The name of the property</param>
            <typeparam name="T">Type of value</typeparam>
        </member>
        <member name="T:UnityObjectExtensions">
            <summary>
            Contains extension methods for <see cref="T:UnityEngine.Object"/>
            </summary>
        </member>
        <member name="M:UnityObjectExtensions.CloneInstance``1(``0)">
            <summary>
            Clones the Scriptable Object
            </summary>
        </member>
        <member name="M:StringExtensions.IsNullOrEmpty(System.String)">
            <summary>Indicates whether the specified string is <see langword="null" /> or an empty string ("").</summary>
            <returns><see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or an empty string (""); otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>Indicates whether a specified string is <see langword="null" />, empty, or consists only of white-space characters.</summary>
            <returns><see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, or if <paramref name="value" /> consists exclusively of white-space characters.</returns>
        </member>
        <member name="M:StringExtensions.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
                Returns a String array containing the substrings in this string that are delimited by elements of a specified
                String array. A parameter specifies whether to return empty array elements.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="separator">A string that delimit the substrings in this string.</param>
            <param name="option">
                (Optional) Specify RemoveEmptyEntries to omit empty array elements from the array returned,
                or None to include empty array elements in the array returned.
            </param>
            <returns>
                An array whose elements contain the substrings in this string that are delimited by the separator.
            </returns>
        </member>
        <member name="M:StringExtensions.Reverse(System.String)">
            <summary>
            Reverses the string
            </summary>
        </member>
        <member name="M:StringExtensions.AsEnum``1(System.String,System.Boolean,``0)">
            <summary>
            Convert a string value to an Enum value.
            </summary>
        </member>
        <member name="M:StringExtensions.ToRoman(System.Int32)">
            <summary>
            Number presented in Roman numerals
            </summary>
        </member>
        <member name="M:StringExtensions.SurroundedWith(System.String,System.String)">
            <summary>
            Get the "message" string with the "surround" string at the both sides 
            </summary>
        </member>
        <member name="M:StringExtensions.SurroundedWith(System.String,System.String,System.String)">
            <summary>
            Get the "message" string with the "start" at the beginning and "end" at the end of the string
            </summary>
        </member>
        <member name="M:StringExtensions.Colored(System.String,Colors)">
            <summary>
            Surround string with "color" tag
            </summary>
        </member>
        <member name="M:StringExtensions.Colored(System.String,System.String)">
            <summary>
            Surround string with "color" tag
            </summary>
        </member>
        <member name="M:StringExtensions.Sized(System.String,System.Int32)">
            <summary>
            Surround string with "size" tag
            </summary>
        </member>
        <member name="M:StringExtensions.Underlined(System.String)">
            <summary>
            Surround string with "u" tag
            </summary>
        </member>
        <member name="M:StringExtensions.Bold(System.String)">
            <summary>
            Surround string with "b" tag
            </summary>
        </member>
        <member name="M:StringExtensions.Italics(System.String)">
            <summary>
            Surround string with "i" tag
            </summary>
        </member>
        <member name="M:StringExtensions.RemoveEverythingAfter(System.String,System.String,System.Boolean)">
            <summary>
            Removes anything after the <paramref name="value"/> parameter
            </summary>
            <param name="value">The string to seek</param>
            <param name="include">Whether to remove the <paramref name="value"/></param>
        </member>
        <member name="M:StringExtensions.RemoveEverythingBefore(System.String,System.String,System.Boolean)">
            <summary>
            Removes anything after the <paramref name="value"/> parameter
            </summary>
            <param name="value">The string to seek</param>
            <param name="include">Whether to remove the <paramref name="value"/></param>
        </member>
        <member name="M:StringExtensions.GetLast(System.String,System.Int32)">
            <summary>
            Retrieves specified symbols amount from the end of the string.
            </summary>
            <param name="source">Source string.</param>
            <param name="count">Amount of symbols</param>
            <returns>Specified symbols amount from the end of the string.</returns>
        </member>
        <member name="M:StringExtensions.RemoveLast(System.String,System.Int32)">
            <summary>
            Removes specified symbols amount from the end of the string.
            </summary>
            <param name="source">Source string.</param>
            <param name="count">Amount of symbols</param>
            <returns>Modified string.</returns>
        </member>
        <member name="M:StringExtensions.GetFirst(System.String,System.Int32)">
            <summary>
            Retrieves specified symbols amount from the beginning of the string.
            </summary>
            <param name="source">Source string.</param>
            <param name="count">Amount of symbols</param>
            <returns>Specified symbols amount from the beginning of the string.</returns>
        </member>
        <member name="M:StringExtensions.AllIndexesOf(System.String,System.String,System.StringComparison)">
            <summary>
            Method will return all the indexes for a matched string.
            </summary>
            <param name="source">Source string.</param>
            <param name="value">String Value to look for.</param>
            <param name="comparisonType">Comparison Type.</param>
            <returns>Indexes for a matched string.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:StringExtensions.TrimStart(System.String,System.String)">
            <summary>
            Removes all the leading occurrences of specified string from the current string.
            </summary>
            <param name="target">Current string.</param>
            <param name="trimString">A string to remove.</param>
            <returns>The string that remains after all occurrences of trimString parameter are removed from the start of the current string.</returns>
        </member>
        <member name="M:StringExtensions.TrimEnd(System.String,System.String)">
            <summary>
            Removes all the trailing occurrences of specified string from the current string.
            </summary>
            <param name="target">Current string</param>
            <param name="trimString">A string to remove.</param>
            <returns>The string that remains after all occurrences of trimString parameter are removed from the end of the current string.</returns>
        </member>
        <member name="T:Colors">
            <summary>
            Represents list of supported by Unity Console color names
            </summary>
        </member>
        <member name="M:TextureExtensions.AsSprite(UnityEngine.Texture2D)">
            <summary>
            Create new sprite out of Texture
            </summary>
            <param name="texture">A texture to created sprite from.</param>
            <returns>New sprite instance.</returns>
        </member>
        <member name="M:TextureExtensions.Resample(UnityEngine.Texture2D,System.Int32,System.Int32)">
            <summary>
            Change texture size (and scale accordingly)
            </summary>
        </member>
        <member name="M:TextureExtensions.Crop(UnityEngine.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Crop texture to desired size.
            Somehow cropped image seemed darker, brightness offset may fix this
            </summary>
        </member>
        <member name="M:TextureExtensions.WithSolidColor(UnityEngine.Texture2D,UnityEngine.Color)">
            <summary>
            Will texture with solid color
            </summary>
        </member>
        <member name="M:TextureExtensions.ToBase64(UnityEngine.Texture2D)">
            <summary>
            Convert <see cref="T:UnityEngine.Texture2D"/> png representation to base64 string.
            </summary>
            <param name="texture">Texture to convert.</param>
            <returns>Converted texture as base64 string</returns>
        </member>
        <member name="M:TextureExtensions.LoadFromBase64(UnityEngine.Texture2D,System.String)">
            <summary>
            Loads texture content from base64 string.
            </summary>
            <param name="texture">Texture to load image content into.</param>
            <param name="base64EncodedString">Base64 string image representation.</param>
            <returns>Updated texture.</returns>
        </member>
        <member name="M:TransformExtensions.Reset(UnityEngine.RectTransform)">
            <summary>
            Resets `anchorMin`, `anchorMax`, `offsetMin`, `offsetMax` to `Vector2.zero`.
            </summary>
            <param name="rectTransform">RectTransform to operate with.</param>
        </member>
        <member name="M:TransformExtensions.GetScreenRect(UnityEngine.RectTransform)">
            <summary>
            Get's the screen rect of provided RectTransform.
            </summary>
            <param name="rectTransform">RectTransform to operate with.</param>
            <returns>Screen rect.</returns>
        </member>
        <member name="M:TransformExtensions.ToScreenSpace(UnityEngine.RectTransform)">
            <summary>
            Method to get Rect related to ScreenSpace, from given RectTransform.
            This will give the real position of this Rect on screen.
            </summary>
            <param name="transform">Original RectTransform of some object</param>
            <returns>New Rect instance.</returns>
        </member>
        <member name="M:TransformExtensions.SetLossyScale(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>
            Sets <see cref="P:UnityEngine.Transform.lossyScale"/> value.
            </summary>
            <param name="transform">Transform component.</param>
            <param name="lossyScale">New lossyScale value.</param>
        </member>
        <member name="M:TransformExtensions.Reset(UnityEngine.Transform)">
            <summary>
            Reset <see cref="T:UnityEngine.Transform"/> component position, scale and rotation.
            </summary>
            <param name="transform">Transform component.</param>
        </member>
        <member name="M:TransformExtensions.Clear(UnityEngine.Transform,System.Boolean)">
            <summary>
            Removes all transform children.
            </summary>
            <param name="transform">Transform component.</param>
            <param name="activeOnly">Will ignore disabled game-objects when set to <c>true</c>. </param>
            <returns></returns>
        </member>
        <member name="M:TransformExtensions.FindOrCreateChild(UnityEngine.Transform,System.String)">
            <summary>
            Find or create child with name.
            </summary>
            <param name="transform">Transform component.</param>
            <param name="name">Child name.</param>
            <returns>Child <see cref="T:UnityEngine.Transform"/> component instance.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TypeExtensions.InvokeMethod(System.Type,System.String,System.Object[])" -->
        <!-- Badly formed XML comment ignored for member "M:TypeExtensions.InvokeMethod``1(System.Type,System.String,System.Object[])" -->
        <!-- Badly formed XML comment ignored for member "M:TypeExtensions.SetField(System.Type,System.String,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:TypeExtensions.SetField``1(System.Type,System.String,``0)" -->
        <!-- Badly formed XML comment ignored for member "M:TypeExtensions.GetField(System.Type,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:TypeExtensions.GetField``1(System.Type,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:TypeExtensions.SetProperty(System.Type,System.String,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:TypeExtensions.SetProperty``1(System.Type,System.String,``0)" -->
        <!-- Badly formed XML comment ignored for member "M:TypeExtensions.GetProperty(System.Type,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:TypeExtensions.GetProperty``1(System.Type,System.String)" -->
        <member name="M:VectorExtensions.ResetPosition(UnityEngine.Transform)">
            <summary>
            Set position to Vector3.zero.
            </summary>
        </member>
        <member name="M:VectorExtensions.ResetSize(UnityEngine.RectTransform)">
            <summary>
            Set sizeDelta to Vector2.Zero.
            </summary>
        </member>
        <member name="M:VectorExtensions.SnapValue(UnityEngine.Vector4,System.Single)">
            <summary>
            Snap to grid of snapValue
            </summary>
        </member>
        <member name="M:VectorExtensions.SnapValue(UnityEngine.Vector3,System.Single)">
            <summary>
            Snap to grid of snapValue
            </summary>
        </member>
        <member name="M:VectorExtensions.SnapValue(UnityEngine.Vector2,System.Single)">
            <summary>
            Snap to grid of snapValue
            </summary>
        </member>
        <member name="M:VectorExtensions.SnapPosition(UnityEngine.Transform,System.Single)">
            <summary>
            Snap position to grid of snapValue
            </summary>
        </member>
        <member name="M:VectorExtensions.SnapToOne(UnityEngine.Vector2)">
            <summary>
            Snap to one unit grid
            </summary>
        </member>
        <member name="M:VectorExtensions.SnapToOne(UnityEngine.Vector3)">
            <summary>
            Snap to one unit grid
            </summary>
        </member>
        <member name="M:VectorExtensions.SnapToOne(UnityEngine.Vector4)">
            <summary>
            Snap to one unit grid
            </summary>
        </member>
        <member name="M:VectorExtensions.GetClosest(UnityEngine.Vector3,System.Collections.Generic.IEnumerable{UnityEngine.Vector3})">
            <summary>
            Finds the position closest to the given one.
            </summary>
            <param name="position">World position.</param>
            <param name="otherPositions">Other world positions.</param>
            <returns>Closest position.</returns>
        </member>
        <member name="M:VectorExtensions.To(UnityEngine.Vector4,UnityEngine.Vector4)">
            <summary>
            Get vector between source and destination
            </summary>
        </member>
        <member name="M:VectorExtensions.To(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Get vector between source and destination
            </summary>
        </member>
        <member name="M:VectorExtensions.To(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Get vector between source and destination
            </summary>
        </member>
        <member name="M:VectorExtensions.To(UnityEngine.Component,UnityEngine.Component)">
            <summary>
            Get vector between source and target
            </summary>
        </member>
        <member name="M:VectorExtensions.To(UnityEngine.Component,UnityEngine.GameObject)">
            <summary>
            Get vector between source and target
            </summary>
        </member>
        <member name="M:VectorExtensions.To(UnityEngine.GameObject,UnityEngine.Component)">
            <summary>
            Get vector between source and target
            </summary>
        </member>
        <member name="M:VectorExtensions.To(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Get vector between source and target
            </summary>
        </member>
        <member name="M:VectorExtensions.SqrDistance(UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Calculates a squared distance between current and given vectors.
            </summary>
            <param name="a">The current vector.</param>
            <param name="b">The given vector.</param>
            <returns>Returns squared distance between current and given vectors.</returns>
        </member>
        <member name="M:VectorExtensions.MultipliedBy(UnityEngine.Vector3@,System.Single)">
            <summary>
            Multiplies each element in Vector3 by the given scalar.
            </summary>
            <param name="a">The current vector.</param>
            <param name="s">The given scalar.</param>
            <returns>Returns new Vector3 containing the multiplied components.</returns>
        </member>
        <member name="M:VectorExtensions.MultipliedBy(UnityEngine.Vector3@,UnityEngine.Vector3)">
            <summary>
            Multiplies each element in Vector3 a by the corresponding element of b.
            </summary>
            <param name="a">The current vector.</param>
            <param name="b">The given vector.</param>
            <returns>Returns new Vector3 containing the multiplied components of the given vectors.</returns>
        </member>
        <member name="M:VectorExtensions.SmoothDampEuler(UnityEngine.Vector3@,UnityEngine.Vector3,UnityEngine.Vector3@,System.Single)">
            <summary>
            Smoothes a Vector3 that represents euler angles.
            </summary>
            <param name="current">The current Vector3 value.</param>
            <param name="target">The target Vector3 value.</param>
            <param name="velocity">A refernce Vector3 used internally.</param>
            <param name="smoothTime">The time to smooth, in seconds.</param>
            <returns>The smoothed Vector3 value.</returns>
        </member>
        <member name="M:VectorExtensions.SqrDistance(UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Calculates a squared distance between current and given vectors.
            </summary>
            <param name="a">The current vector.</param>
            <param name="b">The given vector.</param>
            <returns>Returns squared distance between current and given vectors.</returns>
        </member>
        <member name="M:VectorExtensions.MultipliedBy(UnityEngine.Vector2@,System.Single)">
            <summary>
            Multiplies each element in Vector2 by the given scalar.
            </summary>
            <param name="a">The current vector.</param>
            <param name="s">The given scalar.</param>
            <returns>Returns new Vector2 containing the multiplied components.</returns>
        </member>
        <member name="M:VectorExtensions.MultipliedBy(UnityEngine.Vector2@,UnityEngine.Vector2)">
            <summary>
            Multiplies each element in Vector2 a by the corresponding element of b.
            </summary>
            <param name="a">The current vector.</param>
            <param name="b">The given vector.</param>
            <returns>Returns new Vector2 containing the multiplied components of the given vectors.</returns>
        </member>
        <member name="T:ModdedIDRegistry">
            <summary>
            Handles identification of Modded ID's
            </summary>
        </member>
        <member name="T:SiloStorageExtensions">
            <summary>
            Adds more methods to <see cref="T:SiloStorage"/> to allow for more flexable addition 
            </summary>
        </member>
    </members>
</doc>
